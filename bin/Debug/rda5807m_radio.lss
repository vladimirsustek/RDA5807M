
bin\Debug\rda5807m_radio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00001e30  00001ec4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  0080016c  0080016c  00001f30  2**0
                  ALLOC
  3 .comment      00000012  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f44  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 000001c0  00000000  00000000  00001f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000019c3  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000db5  00000000  00000000  00003b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00001cde  00000000  00000000  000048c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000940  00000000  00000000  000065a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000009bd  00000000  00000000  00006ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e3       	ldi	r30, 0x30	; 48
      7c:	fe e1       	ldi	r31, 0x1E	; 30
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 36       	cpi	r26, 0x6C	; 108
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ac e6       	ldi	r26, 0x6C	; 108
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 3f       	cpi	r26, 0xF9	; 249
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 4a 08 	call	0x1094	; 0x1094 <main>
      9e:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <gpio_initialize>:
#include "gpio_interface.h"

void gpio_initialize(void){
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62

    DDRB|=(1 << ONBOARD_LED);
      ae:	84 e2       	ldi	r24, 0x24	; 36
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	fc 01       	movw	r30, r24
      b4:	20 81       	ld	r18, Z
      b6:	84 e2       	ldi	r24, 0x24	; 36
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	20 62       	ori	r18, 0x20	; 32
      bc:	fc 01       	movw	r30, r24
      be:	20 83       	st	Z, r18
    PORTB&=~(1 << ONBOARD_LED);
      c0:	85 e2       	ldi	r24, 0x25	; 37
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	fc 01       	movw	r30, r24
      c6:	20 81       	ld	r18, Z
      c8:	85 e2       	ldi	r24, 0x25	; 37
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	2f 7d       	andi	r18, 0xDF	; 223
      ce:	fc 01       	movw	r30, r24
      d0:	20 83       	st	Z, r18
}
      d2:	00 00       	nop
      d4:	df 91       	pop	r29
      d6:	cf 91       	pop	r28
      d8:	08 95       	ret

000000da <gpio_LED_toggle>:

void gpio_LED_toggle(void){
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62

    if(PORTB & (1 << ONBOARD_LED)){
      e2:	85 e2       	ldi	r24, 0x25	; 37
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	fc 01       	movw	r30, r24
      e8:	80 81       	ld	r24, Z
      ea:	88 2f       	mov	r24, r24
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	80 72       	andi	r24, 0x20	; 32
      f0:	99 27       	eor	r25, r25
      f2:	89 2b       	or	r24, r25
      f4:	51 f0       	breq	.+20     	; 0x10a <gpio_LED_toggle+0x30>
        PORTB&=~(1 << ONBOARD_LED);
      f6:	85 e2       	ldi	r24, 0x25	; 37
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	fc 01       	movw	r30, r24
      fc:	20 81       	ld	r18, Z
      fe:	85 e2       	ldi	r24, 0x25	; 37
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	2f 7d       	andi	r18, 0xDF	; 223
     104:	fc 01       	movw	r30, r24
     106:	20 83       	st	Z, r18
    }
    else {
        PORTB|= (1 << ONBOARD_LED);
    }
}
     108:	09 c0       	rjmp	.+18     	; 0x11c <gpio_LED_toggle+0x42>
        PORTB|= (1 << ONBOARD_LED);
     10a:	85 e2       	ldi	r24, 0x25	; 37
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	fc 01       	movw	r30, r24
     110:	20 81       	ld	r18, Z
     112:	85 e2       	ldi	r24, 0x25	; 37
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	20 62       	ori	r18, 0x20	; 32
     118:	fc 01       	movw	r30, r24
     11a:	20 83       	st	Z, r18
}
     11c:	00 00       	nop
     11e:	df 91       	pop	r29
     120:	cf 91       	pop	r28
     122:	08 95       	ret

00000124 <gpio_LED_set>:

void gpio_LED_set(bool state){
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	0f 92       	push	r0
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
     12e:	89 83       	std	Y+1, r24	; 0x01

    if(state == true){
     130:	89 81       	ldd	r24, Y+1	; 0x01
     132:	88 23       	and	r24, r24
     134:	49 f0       	breq	.+18     	; 0x148 <gpio_LED_set+0x24>
        PORTB|= (1 << PIN5);
     136:	85 e2       	ldi	r24, 0x25	; 37
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	fc 01       	movw	r30, r24
     13c:	20 81       	ld	r18, Z
     13e:	85 e2       	ldi	r24, 0x25	; 37
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	20 62       	ori	r18, 0x20	; 32
     144:	fc 01       	movw	r30, r24
     146:	20 83       	st	Z, r18
    }
    if(state == false) {
     148:	99 81       	ldd	r25, Y+1	; 0x01
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	89 27       	eor	r24, r25
     14e:	88 23       	and	r24, r24
     150:	49 f0       	breq	.+18     	; 0x164 <gpio_LED_set+0x40>
        PORTB&=~(1 << PIN5);
     152:	85 e2       	ldi	r24, 0x25	; 37
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	fc 01       	movw	r30, r24
     158:	20 81       	ld	r18, Z
     15a:	85 e2       	ldi	r24, 0x25	; 37
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	2f 7d       	andi	r18, 0xDF	; 223
     160:	fc 01       	movw	r30, r24
     162:	20 83       	st	Z, r18
    }
}
     164:	00 00       	nop
     166:	0f 90       	pop	r0
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	08 95       	ret

0000016e <__vector_14>:
 * @brief TIMER0_COMPA_vect
 *
 * TIM0 interrupt routine - increment the sys_tick
 *
 */
ISR(TIMER0_COMPA_vect) {
     16e:	1f 92       	push	r1
     170:	0f 92       	push	r0
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	0f 92       	push	r0
     176:	11 24       	eor	r1, r1
     178:	8f 93       	push	r24
     17a:	9f 93       	push	r25
     17c:	af 93       	push	r26
     17e:	bf 93       	push	r27
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
    sys_tick++;
     188:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <sys_tick>
     18c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <sys_tick+0x1>
     190:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <sys_tick+0x2>
     194:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <sys_tick+0x3>
     198:	01 96       	adiw	r24, 0x01	; 1
     19a:	a1 1d       	adc	r26, r1
     19c:	b1 1d       	adc	r27, r1
     19e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <sys_tick>
     1a2:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <sys_tick+0x1>
     1a6:	a0 93 6e 01 	sts	0x016E, r26	; 0x80016e <sys_tick+0x2>
     1aa:	b0 93 6f 01 	sts	0x016F, r27	; 0x80016f <sys_tick+0x3>
}
     1ae:	00 00       	nop
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	bf 91       	pop	r27
     1b6:	af 91       	pop	r26
     1b8:	9f 91       	pop	r25
     1ba:	8f 91       	pop	r24
     1bc:	0f 90       	pop	r0
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	0f 90       	pop	r0
     1c2:	1f 90       	pop	r1
     1c4:	18 95       	reti

000001c6 <tim_tick_initialize>:
 * @sa tim_tick_get
 * @sa tim_block_ms
 * @sa tim_tick_initialize
 *
 */
void tim_tick_initialize(void) {
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
    /* WGM01: CTC mode - clear timer of compare match.
    This means that timer is incremented to value OCR1A,
    when the value is reached, interrupt is called and
    timer is cleared
    */
    TCCR0A |= (1 << WGM01);
     1ce:	84 e4       	ldi	r24, 0x44	; 68
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	fc 01       	movw	r30, r24
     1d4:	20 81       	ld	r18, Z
     1d6:	84 e4       	ldi	r24, 0x44	; 68
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	22 60       	ori	r18, 0x02	; 2
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
    /* TCCR0B: CS01, CS00 sets 64x prescaler */
    TCCR0B |= (1 << CS01)|(1 << CS00);
     1e0:	85 e4       	ldi	r24, 0x45	; 69
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	fc 01       	movw	r30, r24
     1e6:	20 81       	ld	r18, Z
     1e8:	85 e4       	ldi	r24, 0x45	; 69
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	23 60       	ori	r18, 0x03	; 3
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 83       	st	Z, r18
    /* Enable timer interrupt */
    TIMSK0|= (1 << OCIE0A);
     1f2:	8e e6       	ldi	r24, 0x6E	; 110
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	fc 01       	movw	r30, r24
     1f8:	20 81       	ld	r18, Z
     1fa:	8e e6       	ldi	r24, 0x6E	; 110
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	22 60       	ori	r18, 0x02	; 2
     200:	fc 01       	movw	r30, r24
     202:	20 83       	st	Z, r18
       freq = CLOCK/(PRESCALER * OCR1A)
       in case of 16MHz Clock and 64x prescaler
       the frequency of counting is 250kHZ what
       means that if timer counts from 0 to 249,
       value 249 is reached with frequency 1kHZ*/
    OCR0A = 249;
     204:	87 e4       	ldi	r24, 0x47	; 71
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	29 ef       	ldi	r18, 0xF9	; 249
     20a:	fc 01       	movw	r30, r24
     20c:	20 83       	st	Z, r18
}
     20e:	00 00       	nop
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	08 95       	ret

00000216 <tim_tick_unitialize>:
 * @brief Un-Initialize 1 millisecond tick timer TIM0
 *
 * @sa tim_tick_initialize
 *
 */
void tim_tick_unitialize(void) {
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62

    TCCR0A &=~(1 << WGM01);
     21e:	84 e4       	ldi	r24, 0x44	; 68
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	fc 01       	movw	r30, r24
     224:	20 81       	ld	r18, Z
     226:	84 e4       	ldi	r24, 0x44	; 68
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	2d 7f       	andi	r18, 0xFD	; 253
     22c:	fc 01       	movw	r30, r24
     22e:	20 83       	st	Z, r18
    TIMSK0 &=~(1 << OCIE0A);
     230:	8e e6       	ldi	r24, 0x6E	; 110
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	fc 01       	movw	r30, r24
     236:	20 81       	ld	r18, Z
     238:	8e e6       	ldi	r24, 0x6E	; 110
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	2d 7f       	andi	r18, 0xFD	; 253
     23e:	fc 01       	movw	r30, r24
     240:	20 83       	st	Z, r18

}
     242:	00 00       	nop
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <tim_tick_get>:
 *
 * @return sys_tick - 1 millisecond 32-bit variable
 * @sa tim_block_ms
 *
 */
uint32_t tim_tick_get(void) {
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
     252:	28 97       	sbiw	r28, 0x08	; 8
     254:	0f b6       	in	r0, 0x3f	; 63
     256:	f8 94       	cli
     258:	de bf       	out	0x3e, r29	; 62
     25a:	0f be       	out	0x3f, r0	; 63
     25c:	cd bf       	out	0x3d, r28	; 61
    uint32_t tick = 0;
     25e:	19 82       	std	Y+1, r1	; 0x01
     260:	1a 82       	std	Y+2, r1	; 0x02
     262:	1b 82       	std	Y+3, r1	; 0x03
     264:	1c 82       	std	Y+4, r1	; 0x04
    /* Disable interrupt for correct
    reading of the sys_tick 32-bit value*/
    TIMSK0&=~(1 << OCIE0A);
     266:	8e e6       	ldi	r24, 0x6E	; 110
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	fc 01       	movw	r30, r24
     26c:	20 81       	ld	r18, Z
     26e:	8e e6       	ldi	r24, 0x6E	; 110
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	2d 7f       	andi	r18, 0xFD	; 253
     274:	fc 01       	movw	r30, r24
     276:	20 83       	st	Z, r18
    tick = sys_tick;
     278:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <sys_tick>
     27c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <sys_tick+0x1>
     280:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <sys_tick+0x2>
     284:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <sys_tick+0x3>
     288:	89 83       	std	Y+1, r24	; 0x01
     28a:	9a 83       	std	Y+2, r25	; 0x02
     28c:	ab 83       	std	Y+3, r26	; 0x03
     28e:	bc 83       	std	Y+4, r27	; 0x04
    /* Enable-back timer interrupt */
    TIMSK0|= (1 << OCIE0A);
     290:	8e e6       	ldi	r24, 0x6E	; 110
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	fc 01       	movw	r30, r24
     296:	20 81       	ld	r18, Z
     298:	8e e6       	ldi	r24, 0x6E	; 110
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	22 60       	ori	r18, 0x02	; 2
     29e:	fc 01       	movw	r30, r24
     2a0:	20 83       	st	Z, r18
    return tick;
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	9a 81       	ldd	r25, Y+2	; 0x02
     2a6:	ab 81       	ldd	r26, Y+3	; 0x03
     2a8:	bc 81       	ldd	r27, Y+4	; 0x04
     2aa:	8d 83       	std	Y+5, r24	; 0x05
     2ac:	9e 83       	std	Y+6, r25	; 0x06
     2ae:	af 83       	std	Y+7, r26	; 0x07
     2b0:	b8 87       	std	Y+8, r27	; 0x08
}
     2b2:	6d 81       	ldd	r22, Y+5	; 0x05
     2b4:	7e 81       	ldd	r23, Y+6	; 0x06
     2b6:	8f 81       	ldd	r24, Y+7	; 0x07
     2b8:	98 85       	ldd	r25, Y+8	; 0x08
     2ba:	28 96       	adiw	r28, 0x08	; 8
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	f8 94       	cli
     2c0:	de bf       	out	0x3e, r29	; 62
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	cd bf       	out	0x3d, r28	; 61
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <tim_block_ms>:
 * For specified time function calls only tim_blocked_dothis.
 * This function shall be implemented by user/developer
 *
 *
 */
void tim_block_ms(uint32_t Delay) {
     2cc:	cf 92       	push	r12
     2ce:	df 92       	push	r13
     2d0:	ef 92       	push	r14
     2d2:	ff 92       	push	r15
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
     2dc:	60 97       	sbiw	r28, 0x10	; 16
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	f8 94       	cli
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	cd bf       	out	0x3d, r28	; 61
     2e8:	6d 83       	std	Y+5, r22	; 0x05
     2ea:	7e 83       	std	Y+6, r23	; 0x06
     2ec:	8f 83       	std	Y+7, r24	; 0x07
     2ee:	98 87       	std	Y+8, r25	; 0x08

  uint32_t tickstart = 0;
     2f0:	19 82       	std	Y+1, r1	; 0x01
     2f2:	1a 82       	std	Y+2, r1	; 0x02
     2f4:	1b 82       	std	Y+3, r1	; 0x03
     2f6:	1c 82       	std	Y+4, r1	; 0x04
  tickstart = tim_tick_get();
     2f8:	0e 94 25 01 	call	0x24a	; 0x24a <tim_tick_get>
     2fc:	6d 87       	std	Y+13, r22	; 0x0d
     2fe:	7e 87       	std	Y+14, r23	; 0x0e
     300:	8f 87       	std	Y+15, r24	; 0x0f
     302:	98 8b       	std	Y+16, r25	; 0x10
     304:	8d 85       	ldd	r24, Y+13	; 0x0d
     306:	9e 85       	ldd	r25, Y+14	; 0x0e
     308:	af 85       	ldd	r26, Y+15	; 0x0f
     30a:	b8 89       	ldd	r27, Y+16	; 0x10
     30c:	89 83       	std	Y+1, r24	; 0x01
     30e:	9a 83       	std	Y+2, r25	; 0x02
     310:	ab 83       	std	Y+3, r26	; 0x03
     312:	bc 83       	std	Y+4, r27	; 0x04

  while ((tickstart + Delay > tim_tick_get())) {
     314:	00 00       	nop
     316:	49 81       	ldd	r20, Y+1	; 0x01
     318:	5a 81       	ldd	r21, Y+2	; 0x02
     31a:	6b 81       	ldd	r22, Y+3	; 0x03
     31c:	7c 81       	ldd	r23, Y+4	; 0x04
     31e:	8d 81       	ldd	r24, Y+5	; 0x05
     320:	9e 81       	ldd	r25, Y+6	; 0x06
     322:	af 81       	ldd	r26, Y+7	; 0x07
     324:	b8 85       	ldd	r27, Y+8	; 0x08
     326:	6a 01       	movw	r12, r20
     328:	7b 01       	movw	r14, r22
     32a:	c8 0e       	add	r12, r24
     32c:	d9 1e       	adc	r13, r25
     32e:	ea 1e       	adc	r14, r26
     330:	fb 1e       	adc	r15, r27
     332:	0e 94 25 01 	call	0x24a	; 0x24a <tim_tick_get>
     336:	69 87       	std	Y+9, r22	; 0x09
     338:	7a 87       	std	Y+10, r23	; 0x0a
     33a:	8b 87       	std	Y+11, r24	; 0x0b
     33c:	9c 87       	std	Y+12, r25	; 0x0c
     33e:	89 85       	ldd	r24, Y+9	; 0x09
     340:	9a 85       	ldd	r25, Y+10	; 0x0a
     342:	ab 85       	ldd	r26, Y+11	; 0x0b
     344:	bc 85       	ldd	r27, Y+12	; 0x0c
     346:	8c 15       	cp	r24, r12
     348:	9d 05       	cpc	r25, r13
     34a:	ae 05       	cpc	r26, r14
     34c:	bf 05       	cpc	r27, r15
     34e:	18 f3       	brcs	.-58     	; 0x316 <tim_block_ms+0x4a>
#if 0
        tim_blocked_dothis();
#endif
  }
}
     350:	00 00       	nop
     352:	00 00       	nop
     354:	60 96       	adiw	r28, 0x10	; 16
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	ff 90       	pop	r15
     366:	ef 90       	pop	r14
     368:	df 90       	pop	r13
     36a:	cf 90       	pop	r12
     36c:	08 95       	ret

0000036e <tim_blocked_dothis>:
 * To be done
 *
 * @sa tim_block_ms
 *
 */
void tim_blocked_dothis(void) {
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62

}
     376:	00 00       	nop
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <tim_beep_D6D4_initialize>:
 *
 * @sa tim_beep_D6D4_sound
 * @sa tim_beep_D6D4_freq
 *
 */
void tim_beep_D6D4_initialize(void) {
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62

    /* TIM0 - ATmega328p 8-bit timer *************/

    /* Enable beep anode - timer controlled output 'D9'*/
    DDRB|= (1 << PIN1);
     386:	84 e2       	ldi	r24, 0x24	; 36
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	fc 01       	movw	r30, r24
     38c:	20 81       	ld	r18, Z
     38e:	84 e2       	ldi	r24, 0x24	; 36
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	22 60       	ori	r18, 0x02	; 2
     394:	fc 01       	movw	r30, r24
     396:	20 83       	st	Z, r18
    /* Enable beep cathode - permanently grounded 'D7'*/
    DDRD|= (1 << PIN5);
     398:	8a e2       	ldi	r24, 0x2A	; 42
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	fc 01       	movw	r30, r24
     39e:	20 81       	ld	r18, Z
     3a0:	8a e2       	ldi	r24, 0x2A	; 42
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	20 62       	ori	r18, 0x20	; 32
     3a6:	fc 01       	movw	r30, r24
     3a8:	20 83       	st	Z, r18
    /* Set cathode as permanently grounded 'D7'*/
    PORTD|= (1 << PIN5);
     3aa:	8b e2       	ldi	r24, 0x2B	; 43
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	fc 01       	movw	r30, r24
     3b0:	20 81       	ld	r18, Z
     3b2:	8b e2       	ldi	r24, 0x2B	; 43
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	20 62       	ori	r18, 0x20	; 32
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18
    /* WGM12: CTC mode - clear timer of compare match.
    This means that timer is incremented to value OCR1A,
    when the value is reached, interrupt is called and
    timer is cleared
    CS11, CS10: Prescaler of the clock source 64x */
    TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
     3bc:	81 e8       	ldi	r24, 0x81	; 129
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	fc 01       	movw	r30, r24
     3c2:	20 81       	ld	r18, Z
     3c4:	81 e8       	ldi	r24, 0x81	; 129
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	2b 60       	ori	r18, 0x0B	; 11
     3ca:	fc 01       	movw	r30, r24
     3cc:	20 83       	st	Z, r18
    /* COM1A0: enable toggling PORTB.PIN1 when CTC
    reaches value OCR1A */
    TCCR1A = (1 << COM1A0);
     3ce:	80 e8       	ldi	r24, 0x80	; 128
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	20 e4       	ldi	r18, 0x40	; 64
     3d4:	fc 01       	movw	r30, r24
     3d6:	20 83       	st	Z, r18

}
     3d8:	00 00       	nop
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <tim_beep_D6D4_sound>:
 * to toggle PORTB.PIN1
 *
 * @sa tim_blocked_dothis
 *
 */
extern void tim_beep_D6D4_sound(bool state) {
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	0f 92       	push	r0
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	89 83       	std	Y+1, r24	; 0x01
    if(state) {
     3ec:	89 81       	ldd	r24, Y+1	; 0x01
     3ee:	88 23       	and	r24, r24
     3f0:	99 f0       	breq	.+38     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
        /* Enable toggling PORTB.PIN1 and
        enable timer device */
        TCCR1B |= (1 << WGM12);
     3f2:	81 e8       	ldi	r24, 0x81	; 129
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	fc 01       	movw	r30, r24
     3f8:	20 81       	ld	r18, Z
     3fa:	81 e8       	ldi	r24, 0x81	; 129
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	28 60       	ori	r18, 0x08	; 8
     400:	fc 01       	movw	r30, r24
     402:	20 83       	st	Z, r18
        TCCR1A |= (1 << COM1A0);
     404:	80 e8       	ldi	r24, 0x80	; 128
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	fc 01       	movw	r30, r24
     40a:	20 81       	ld	r18, Z
     40c:	80 e8       	ldi	r24, 0x80	; 128
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	20 64       	ori	r18, 0x40	; 64
     412:	fc 01       	movw	r30, r24
     414:	20 83       	st	Z, r18
        /* Disable toggling PORTB.PIN1 and
        Disable timer device */
        TCCR1B &= ~(1 << WGM12);
        TCCR1A &= ~(1 << COM1A0);
    }
}
     416:	12 c0       	rjmp	.+36     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
        TCCR1B &= ~(1 << WGM12);
     418:	81 e8       	ldi	r24, 0x81	; 129
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	fc 01       	movw	r30, r24
     41e:	20 81       	ld	r18, Z
     420:	81 e8       	ldi	r24, 0x81	; 129
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	27 7f       	andi	r18, 0xF7	; 247
     426:	fc 01       	movw	r30, r24
     428:	20 83       	st	Z, r18
        TCCR1A &= ~(1 << COM1A0);
     42a:	80 e8       	ldi	r24, 0x80	; 128
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	fc 01       	movw	r30, r24
     430:	20 81       	ld	r18, Z
     432:	80 e8       	ldi	r24, 0x80	; 128
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	2f 7b       	andi	r18, 0xBF	; 191
     438:	fc 01       	movw	r30, r24
     43a:	20 83       	st	Z, r18
}
     43c:	00 00       	nop
     43e:	0f 90       	pop	r0
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <tim_beep_D6D4_freq>:
 * In case of any changes of the TIM1 prescaler, also do
 * correction of the BEEP_CLOCK constant !!!
 *
 */

extern void tim_beep_D6D4_freq(uint16_t freq) {
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	28 97       	sbiw	r28, 0x08	; 8
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	9c 83       	std	Y+4, r25	; 0x04
     460:	8b 83       	std	Y+3, r24	; 0x03

    uint16_t aux_OCR1A = 0u;
     462:	1a 82       	std	Y+2, r1	; 0x02
     464:	19 82       	std	Y+1, r1	; 0x01
    /* Calculate OCR1A compare register value for
    TCNT1A counter (TCNT1A increments up to OCR1A) */
    aux_OCR1A = (uint16_t)((BEEP_CLOCK)/(uint32_t)freq);
     466:	8b 81       	ldd	r24, Y+3	; 0x03
     468:	9c 81       	ldd	r25, Y+4	; 0x04
     46a:	8c 01       	movw	r16, r24
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	80 e9       	ldi	r24, 0x90	; 144
     472:	90 ed       	ldi	r25, 0xD0	; 208
     474:	a3 e0       	ldi	r26, 0x03	; 3
     476:	b0 e0       	ldi	r27, 0x00	; 0
     478:	8d 83       	std	Y+5, r24	; 0x05
     47a:	9e 83       	std	Y+6, r25	; 0x06
     47c:	af 83       	std	Y+7, r26	; 0x07
     47e:	b8 87       	std	Y+8, r27	; 0x08
     480:	6d 81       	ldd	r22, Y+5	; 0x05
     482:	7e 81       	ldd	r23, Y+6	; 0x06
     484:	8f 81       	ldd	r24, Y+7	; 0x07
     486:	98 85       	ldd	r25, Y+8	; 0x08
     488:	a9 01       	movw	r20, r18
     48a:	98 01       	movw	r18, r16
     48c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__udivmodsi4>
     490:	da 01       	movw	r26, r20
     492:	c9 01       	movw	r24, r18
     494:	9a 83       	std	Y+2, r25	; 0x02
     496:	89 83       	std	Y+1, r24	; 0x01
    /* Reset counting register for fluent beep */
    TCNT1 = 0;
     498:	84 e8       	ldi	r24, 0x84	; 132
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	dc 01       	movw	r26, r24
     49e:	11 96       	adiw	r26, 0x01	; 1
     4a0:	1c 92       	st	X, r1
     4a2:	1e 92       	st	-X, r1
    /* Write register for frequency change */
    OCR1A = aux_OCR1A;
     4a4:	88 e8       	ldi	r24, 0x88	; 136
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	29 81       	ldd	r18, Y+1	; 0x01
     4aa:	3a 81       	ldd	r19, Y+2	; 0x02
     4ac:	fc 01       	movw	r30, r24
     4ae:	31 83       	std	Z+1, r19	; 0x01
     4b0:	20 83       	st	Z, r18

}
     4b2:	00 00       	nop
     4b4:	28 96       	adiw	r28, 0x08	; 8
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	08 95       	ret

000004ca <twi_init>:
#define TWI_ADDRESS_W(id)    (((id) << 1) & ~0x01)
/** Mask TWI slave addressing byte  with given id and read intend. */
#define TWI_ADDRESS_R(id)    (((id) << 1) | 0x01)

void twi_init(void)
{
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
    TWBR = TWBR_VALUE;
     4d2:	88 eb       	ldi	r24, 0xB8	; 184
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	2c e0       	ldi	r18, 0x0C	; 12
     4d8:	fc 01       	movw	r30, r24
     4da:	20 83       	st	Z, r18
    TWSR = (TWPS1_VALUE << TWPS1) | (TWPS0_VALUE << TWPS0);
     4dc:	89 eb       	ldi	r24, 0xB9	; 185
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	fc 01       	movw	r30, r24
     4e2:	10 82       	st	Z, r1

    TWCR = (1 << TWEN);
     4e4:	8c eb       	ldi	r24, 0xBC	; 188
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	24 e0       	ldi	r18, 0x04	; 4
     4ea:	fc 01       	movw	r30, r24
     4ec:	20 83       	st	Z, r18
}
     4ee:	00 00       	nop
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <twi_waitForComplete>:

/**
 * Blocks until the current condition is completed.
 */
static void twi_waitForComplete(void)
{
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
    while(~TWCR & (1 << TWINT))
     4fe:	00 00       	nop
     500:	8c eb       	ldi	r24, 0xBC	; 188
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	fc 01       	movw	r30, r24
     506:	80 81       	ld	r24, Z
     508:	88 23       	and	r24, r24
     50a:	d4 f7       	brge	.-12     	; 0x500 <twi_waitForComplete+0xa>
        ;
}
     50c:	00 00       	nop
     50e:	00 00       	nop
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <twi_start>:



bool twi_start(void)
{
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     51e:	8c eb       	ldi	r24, 0xBC	; 188
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	24 ea       	ldi	r18, 0xA4	; 164
     524:	fc 01       	movw	r30, r24
     526:	20 83       	st	Z, r18

    twi_waitForComplete();
     528:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <twi_waitForComplete>

    return TW_STATUS != TW_START;
     52c:	89 eb       	ldi	r24, 0xB9	; 185
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	fc 01       	movw	r30, r24
     532:	80 81       	ld	r24, Z
     534:	88 2f       	mov	r24, r24
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	88 7f       	andi	r24, 0xF8	; 248
     53a:	99 27       	eor	r25, r25
     53c:	21 e0       	ldi	r18, 0x01	; 1
     53e:	08 97       	sbiw	r24, 0x08	; 8
     540:	09 f4       	brne	.+2      	; 0x544 <twi_start+0x2e>
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	82 2f       	mov	r24, r18
}
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	08 95       	ret

0000054c <twi_repStart>:

bool twi_repStart(void)
{
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     554:	8c eb       	ldi	r24, 0xBC	; 188
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	24 ea       	ldi	r18, 0xA4	; 164
     55a:	fc 01       	movw	r30, r24
     55c:	20 83       	st	Z, r18

    twi_waitForComplete();
     55e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <twi_waitForComplete>

    return TW_STATUS != TW_REP_START;
     562:	89 eb       	ldi	r24, 0xB9	; 185
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	fc 01       	movw	r30, r24
     568:	80 81       	ld	r24, Z
     56a:	88 2f       	mov	r24, r24
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	88 7f       	andi	r24, 0xF8	; 248
     570:	99 27       	eor	r25, r25
     572:	21 e0       	ldi	r18, 0x01	; 1
     574:	40 97       	sbiw	r24, 0x10	; 16
     576:	09 f4       	brne	.+2      	; 0x57a <twi_repStart+0x2e>
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	82 2f       	mov	r24, r18
}
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <twi_stop>:

void twi_stop(void)
{
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     58a:	8c eb       	ldi	r24, 0xBC	; 188
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	24 e9       	ldi	r18, 0x94	; 148
     590:	fc 01       	movw	r30, r24
     592:	20 83       	st	Z, r18
}
     594:	00 00       	nop
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <twi_addressWrite>:


bool twi_addressWrite(uint8_t address)
{
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	0f 92       	push	r0
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	89 83       	std	Y+1, r24	; 0x01
    TWDR = TWI_ADDRESS_W(address);
     5a8:	8b eb       	ldi	r24, 0xBB	; 187
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	29 81       	ldd	r18, Y+1	; 0x01
     5ae:	22 0f       	add	r18, r18
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 83       	st	Z, r18
    TWCR = (1 << TWINT) | (1 << TWEN);
     5b4:	8c eb       	ldi	r24, 0xBC	; 188
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	24 e8       	ldi	r18, 0x84	; 132
     5ba:	fc 01       	movw	r30, r24
     5bc:	20 83       	st	Z, r18


    twi_waitForComplete();
     5be:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <twi_waitForComplete>

    return TW_STATUS != TW_MT_SLA_ACK;
     5c2:	89 eb       	ldi	r24, 0xB9	; 185
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	fc 01       	movw	r30, r24
     5c8:	80 81       	ld	r24, Z
     5ca:	88 2f       	mov	r24, r24
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	88 7f       	andi	r24, 0xF8	; 248
     5d0:	99 27       	eor	r25, r25
     5d2:	21 e0       	ldi	r18, 0x01	; 1
     5d4:	48 97       	sbiw	r24, 0x18	; 24
     5d6:	09 f4       	brne	.+2      	; 0x5da <twi_addressWrite+0x3e>
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	82 2f       	mov	r24, r18
}
     5dc:	0f 90       	pop	r0
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <twi_addressRead>:

bool twi_addressRead(uint8_t address)
{
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	0f 92       	push	r0
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
     5ee:	89 83       	std	Y+1, r24	; 0x01
    TWDR = TWI_ADDRESS_R(address);
     5f0:	89 81       	ldd	r24, Y+1	; 0x01
     5f2:	88 2f       	mov	r24, r24
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	28 2f       	mov	r18, r24
     5fc:	21 60       	ori	r18, 0x01	; 1
     5fe:	8b eb       	ldi	r24, 0xBB	; 187
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	fc 01       	movw	r30, r24
     604:	20 83       	st	Z, r18
    TWCR = (1 << TWINT) | (1 << TWEN);
     606:	8c eb       	ldi	r24, 0xBC	; 188
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	24 e8       	ldi	r18, 0x84	; 132
     60c:	fc 01       	movw	r30, r24
     60e:	20 83       	st	Z, r18

    twi_waitForComplete();
     610:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <twi_waitForComplete>

    return TW_STATUS != TW_MR_SLA_ACK;
     614:	89 eb       	ldi	r24, 0xB9	; 185
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	fc 01       	movw	r30, r24
     61a:	80 81       	ld	r24, Z
     61c:	88 2f       	mov	r24, r24
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	88 7f       	andi	r24, 0xF8	; 248
     622:	99 27       	eor	r25, r25
     624:	21 e0       	ldi	r18, 0x01	; 1
     626:	80 34       	cpi	r24, 0x40	; 64
     628:	91 05       	cpc	r25, r1
     62a:	09 f4       	brne	.+2      	; 0x62e <twi_addressRead+0x4a>
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	82 2f       	mov	r24, r18
}
     630:	0f 90       	pop	r0
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <twi_write>:


bool twi_write(uint8_t data)
{
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	0f 92       	push	r0
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data;
     644:	8b eb       	ldi	r24, 0xBB	; 187
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	29 81       	ldd	r18, Y+1	; 0x01
     64a:	fc 01       	movw	r30, r24
     64c:	20 83       	st	Z, r18
    TWCR = (1 << TWINT) | (1 << TWEN);
     64e:	8c eb       	ldi	r24, 0xBC	; 188
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	24 e8       	ldi	r18, 0x84	; 132
     654:	fc 01       	movw	r30, r24
     656:	20 83       	st	Z, r18

    twi_waitForComplete();
     658:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <twi_waitForComplete>

    return TW_STATUS != TW_MT_DATA_ACK;
     65c:	89 eb       	ldi	r24, 0xB9	; 185
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	fc 01       	movw	r30, r24
     662:	80 81       	ld	r24, Z
     664:	88 2f       	mov	r24, r24
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	88 7f       	andi	r24, 0xF8	; 248
     66a:	99 27       	eor	r25, r25
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	88 97       	sbiw	r24, 0x28	; 40
     670:	09 f4       	brne	.+2      	; 0x674 <twi_write+0x3c>
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	82 2f       	mov	r24, r18
}
     676:	0f 90       	pop	r0
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <twi_writeBurst>:

size_t twi_writeBurst(uint8_t *data, size_t len)
{
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	00 d0       	rcall	.+0      	; 0x684 <twi_writeBurst+0x6>
     684:	00 d0       	rcall	.+0      	; 0x686 <twi_writeBurst+0x8>
     686:	00 d0       	rcall	.+0      	; 0x688 <twi_writeBurst+0xa>
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	9c 83       	std	Y+4, r25	; 0x04
     68e:	8b 83       	std	Y+3, r24	; 0x03
     690:	7e 83       	std	Y+6, r23	; 0x06
     692:	6d 83       	std	Y+5, r22	; 0x05
    size_t i = len;
     694:	8d 81       	ldd	r24, Y+5	; 0x05
     696:	9e 81       	ldd	r25, Y+6	; 0x06
     698:	9a 83       	std	Y+2, r25	; 0x02
     69a:	89 83       	std	Y+1, r24	; 0x01

    while(i)
     69c:	12 c0       	rjmp	.+36     	; 0x6c2 <twi_writeBurst+0x44>
    {
        if(twi_write(*data++))
     69e:	8b 81       	ldd	r24, Y+3	; 0x03
     6a0:	9c 81       	ldd	r25, Y+4	; 0x04
     6a2:	9c 01       	movw	r18, r24
     6a4:	2f 5f       	subi	r18, 0xFF	; 255
     6a6:	3f 4f       	sbci	r19, 0xFF	; 255
     6a8:	3c 83       	std	Y+4, r19	; 0x04
     6aa:	2b 83       	std	Y+3, r18	; 0x03
     6ac:	fc 01       	movw	r30, r24
     6ae:	80 81       	ld	r24, Z
     6b0:	0e 94 1c 03 	call	0x638	; 0x638 <twi_write>
     6b4:	88 23       	and	r24, r24
     6b6:	51 f4       	brne	.+20     	; 0x6cc <twi_writeBurst+0x4e>
            break;
        i--;
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	9a 83       	std	Y+2, r25	; 0x02
     6c0:	89 83       	std	Y+1, r24	; 0x01
    while(i)
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	9a 81       	ldd	r25, Y+2	; 0x02
     6c6:	89 2b       	or	r24, r25
     6c8:	51 f7       	brne	.-44     	; 0x69e <twi_writeBurst+0x20>
     6ca:	01 c0       	rjmp	.+2      	; 0x6ce <twi_writeBurst+0x50>
            break;
     6cc:	00 00       	nop
    }

    return len - i;
     6ce:	2d 81       	ldd	r18, Y+5	; 0x05
     6d0:	3e 81       	ldd	r19, Y+6	; 0x06
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	9a 81       	ldd	r25, Y+2	; 0x02
     6d6:	a9 01       	movw	r20, r18
     6d8:	48 1b       	sub	r20, r24
     6da:	59 0b       	sbc	r21, r25
     6dc:	ca 01       	movw	r24, r20
}
     6de:	26 96       	adiw	r28, 0x06	; 6
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <twi_readAck>:


bool twi_readAck(uint8_t *data)
{
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	00 d0       	rcall	.+0      	; 0x6f6 <twi_readAck+0x6>
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	9a 83       	std	Y+2, r25	; 0x02
     6fc:	89 83       	std	Y+1, r24	; 0x01
    TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
     6fe:	8c eb       	ldi	r24, 0xBC	; 188
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	24 ec       	ldi	r18, 0xC4	; 196
     704:	fc 01       	movw	r30, r24
     706:	20 83       	st	Z, r18
    twi_waitForComplete();
     708:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <twi_waitForComplete>

    *data = TWDR;
     70c:	8b eb       	ldi	r24, 0xBB	; 187
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	fc 01       	movw	r30, r24
     712:	20 81       	ld	r18, Z
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	9a 81       	ldd	r25, Y+2	; 0x02
     718:	fc 01       	movw	r30, r24
     71a:	20 83       	st	Z, r18

    return TW_STATUS != TW_MR_DATA_ACK;
     71c:	89 eb       	ldi	r24, 0xB9	; 185
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	fc 01       	movw	r30, r24
     722:	80 81       	ld	r24, Z
     724:	88 2f       	mov	r24, r24
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	88 7f       	andi	r24, 0xF8	; 248
     72a:	99 27       	eor	r25, r25
     72c:	21 e0       	ldi	r18, 0x01	; 1
     72e:	80 35       	cpi	r24, 0x50	; 80
     730:	91 05       	cpc	r25, r1
     732:	09 f4       	brne	.+2      	; 0x736 <twi_readAck+0x46>
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	82 2f       	mov	r24, r18
}
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	08 95       	ret

00000742 <twi_readAckBurst>:

size_t twi_readAckBurst(uint8_t *data, size_t len)
{
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	00 d0       	rcall	.+0      	; 0x748 <twi_readAckBurst+0x6>
     748:	00 d0       	rcall	.+0      	; 0x74a <twi_readAckBurst+0x8>
     74a:	00 d0       	rcall	.+0      	; 0x74c <twi_readAckBurst+0xa>
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	9c 83       	std	Y+4, r25	; 0x04
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	7e 83       	std	Y+6, r23	; 0x06
     756:	6d 83       	std	Y+5, r22	; 0x05
    size_t i = len;
     758:	8d 81       	ldd	r24, Y+5	; 0x05
     75a:	9e 81       	ldd	r25, Y+6	; 0x06
     75c:	9a 83       	std	Y+2, r25	; 0x02
     75e:	89 83       	std	Y+1, r24	; 0x01

    while(i)
     760:	10 c0       	rjmp	.+32     	; 0x782 <twi_readAckBurst+0x40>
    {
        if(twi_readAck(data++))
     762:	8b 81       	ldd	r24, Y+3	; 0x03
     764:	9c 81       	ldd	r25, Y+4	; 0x04
     766:	9c 01       	movw	r18, r24
     768:	2f 5f       	subi	r18, 0xFF	; 255
     76a:	3f 4f       	sbci	r19, 0xFF	; 255
     76c:	3c 83       	std	Y+4, r19	; 0x04
     76e:	2b 83       	std	Y+3, r18	; 0x03
     770:	0e 94 78 03 	call	0x6f0	; 0x6f0 <twi_readAck>
     774:	88 23       	and	r24, r24
     776:	51 f4       	brne	.+20     	; 0x78c <twi_readAckBurst+0x4a>
            break;
        i--;
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	9a 81       	ldd	r25, Y+2	; 0x02
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	9a 83       	std	Y+2, r25	; 0x02
     780:	89 83       	std	Y+1, r24	; 0x01
    while(i)
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	9a 81       	ldd	r25, Y+2	; 0x02
     786:	89 2b       	or	r24, r25
     788:	61 f7       	brne	.-40     	; 0x762 <twi_readAckBurst+0x20>
     78a:	01 c0       	rjmp	.+2      	; 0x78e <twi_readAckBurst+0x4c>
            break;
     78c:	00 00       	nop
    }

    return len - i;
     78e:	2d 81       	ldd	r18, Y+5	; 0x05
     790:	3e 81       	ldd	r19, Y+6	; 0x06
     792:	89 81       	ldd	r24, Y+1	; 0x01
     794:	9a 81       	ldd	r25, Y+2	; 0x02
     796:	a9 01       	movw	r20, r18
     798:	48 1b       	sub	r20, r24
     79a:	59 0b       	sbc	r21, r25
     79c:	ca 01       	movw	r24, r20
}
     79e:	26 96       	adiw	r28, 0x06	; 6
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <twi_readNoAck>:

bool twi_readNoAck(uint8_t *data)
{
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <twi_readNoAck+0x6>
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	9a 83       	std	Y+2, r25	; 0x02
     7bc:	89 83       	std	Y+1, r24	; 0x01
    TWCR = (1 << TWINT) | (1 << TWEN);
     7be:	8c eb       	ldi	r24, 0xBC	; 188
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	24 e8       	ldi	r18, 0x84	; 132
     7c4:	fc 01       	movw	r30, r24
     7c6:	20 83       	st	Z, r18
    twi_waitForComplete();
     7c8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <twi_waitForComplete>

    *data = TWDR;
     7cc:	8b eb       	ldi	r24, 0xBB	; 187
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 81       	ld	r18, Z
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	9a 81       	ldd	r25, Y+2	; 0x02
     7d8:	fc 01       	movw	r30, r24
     7da:	20 83       	st	Z, r18

    return TW_STATUS != TW_MR_DATA_NACK;
     7dc:	89 eb       	ldi	r24, 0xB9	; 185
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	fc 01       	movw	r30, r24
     7e2:	80 81       	ld	r24, Z
     7e4:	88 2f       	mov	r24, r24
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	88 7f       	andi	r24, 0xF8	; 248
     7ea:	99 27       	eor	r25, r25
     7ec:	21 e0       	ldi	r18, 0x01	; 1
     7ee:	88 35       	cpi	r24, 0x58	; 88
     7f0:	91 05       	cpc	r25, r1
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <twi_readNoAck+0x46>
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	82 2f       	mov	r24, r18
}
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	08 95       	ret

00000802 <twi_readNoAckBurst>:

size_t twi_readNoAckBurst(uint8_t *data, size_t len)
{
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	00 d0       	rcall	.+0      	; 0x808 <twi_readNoAckBurst+0x6>
     808:	00 d0       	rcall	.+0      	; 0x80a <twi_readNoAckBurst+0x8>
     80a:	00 d0       	rcall	.+0      	; 0x80c <twi_readNoAckBurst+0xa>
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	8b 83       	std	Y+3, r24	; 0x03
     814:	7e 83       	std	Y+6, r23	; 0x06
     816:	6d 83       	std	Y+5, r22	; 0x05
    size_t i = len;
     818:	8d 81       	ldd	r24, Y+5	; 0x05
     81a:	9e 81       	ldd	r25, Y+6	; 0x06
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01

    while(i)
     820:	10 c0       	rjmp	.+32     	; 0x842 <twi_readNoAckBurst+0x40>
    {
        if(twi_readNoAck(data++))
     822:	8b 81       	ldd	r24, Y+3	; 0x03
     824:	9c 81       	ldd	r25, Y+4	; 0x04
     826:	9c 01       	movw	r18, r24
     828:	2f 5f       	subi	r18, 0xFF	; 255
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	3c 83       	std	Y+4, r19	; 0x04
     82e:	2b 83       	std	Y+3, r18	; 0x03
     830:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <twi_readNoAck>
     834:	88 23       	and	r24, r24
     836:	51 f4       	brne	.+20     	; 0x84c <twi_readNoAckBurst+0x4a>
            break;
        i--;
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	9a 83       	std	Y+2, r25	; 0x02
     840:	89 83       	std	Y+1, r24	; 0x01
    while(i)
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	9a 81       	ldd	r25, Y+2	; 0x02
     846:	89 2b       	or	r24, r25
     848:	61 f7       	brne	.-40     	; 0x822 <twi_readNoAckBurst+0x20>
     84a:	01 c0       	rjmp	.+2      	; 0x84e <twi_readNoAckBurst+0x4c>
            break;
     84c:	00 00       	nop
    }

    return len - i;
     84e:	2d 81       	ldd	r18, Y+5	; 0x05
     850:	3e 81       	ldd	r19, Y+6	; 0x06
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	9a 81       	ldd	r25, Y+2	; 0x02
     856:	a9 01       	movw	r20, r18
     858:	48 1b       	sub	r20, r24
     85a:	59 0b       	sbc	r21, r25
     85c:	ca 01       	movw	r24, r20
}
     85e:	26 96       	adiw	r28, 0x06	; 6
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <twi_writeToSlave>:


bool twi_writeToSlave(uint8_t address, uint8_t *data, size_t len)
{
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	00 d0       	rcall	.+0      	; 0x876 <twi_writeToSlave+0x6>
     876:	00 d0       	rcall	.+0      	; 0x878 <twi_writeToSlave+0x8>
     878:	0f 92       	push	r0
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	89 83       	std	Y+1, r24	; 0x01
     880:	7b 83       	std	Y+3, r23	; 0x03
     882:	6a 83       	std	Y+2, r22	; 0x02
     884:	5d 83       	std	Y+5, r21	; 0x05
     886:	4c 83       	std	Y+4, r20	; 0x04
    if(twi_start())
     888:	0e 94 8b 02 	call	0x516	; 0x516 <twi_start>
     88c:	88 23       	and	r24, r24
     88e:	11 f0       	breq	.+4      	; 0x894 <twi_writeToSlave+0x24>
        return 1;
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	1d c0       	rjmp	.+58     	; 0x8ce <twi_writeToSlave+0x5e>
    if(twi_addressWrite(address))
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	0e 94 ce 02 	call	0x59c	; 0x59c <twi_addressWrite>
     89a:	88 23       	and	r24, r24
     89c:	21 f0       	breq	.+8      	; 0x8a6 <twi_writeToSlave+0x36>
    {
        twi_stop();
     89e:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>
        return 1;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	14 c0       	rjmp	.+40     	; 0x8ce <twi_writeToSlave+0x5e>
    }

    if(twi_writeBurst(data, len) != len)
     8a6:	2c 81       	ldd	r18, Y+4	; 0x04
     8a8:	3d 81       	ldd	r19, Y+5	; 0x05
     8aa:	8a 81       	ldd	r24, Y+2	; 0x02
     8ac:	9b 81       	ldd	r25, Y+3	; 0x03
     8ae:	b9 01       	movw	r22, r18
     8b0:	0e 94 3f 03 	call	0x67e	; 0x67e <twi_writeBurst>
     8b4:	9c 01       	movw	r18, r24
     8b6:	8c 81       	ldd	r24, Y+4	; 0x04
     8b8:	9d 81       	ldd	r25, Y+5	; 0x05
     8ba:	82 17       	cp	r24, r18
     8bc:	93 07       	cpc	r25, r19
     8be:	21 f0       	breq	.+8      	; 0x8c8 <twi_writeToSlave+0x58>
    {
        twi_stop();
     8c0:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>
        return 1;
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	03 c0       	rjmp	.+6      	; 0x8ce <twi_writeToSlave+0x5e>
    }

    twi_stop();
     8c8:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>

    return 0;
     8cc:	80 e0       	ldi	r24, 0x00	; 0
}
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <twi_readFromSlave>:

bool twi_readFromSlave(uint8_t address, uint8_t *data, size_t len)
{
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <twi_readFromSlave+0x6>
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <twi_readFromSlave+0x8>
     8e6:	0f 92       	push	r0
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	89 83       	std	Y+1, r24	; 0x01
     8ee:	7b 83       	std	Y+3, r23	; 0x03
     8f0:	6a 83       	std	Y+2, r22	; 0x02
     8f2:	5d 83       	std	Y+5, r21	; 0x05
     8f4:	4c 83       	std	Y+4, r20	; 0x04
    if(twi_start())
     8f6:	0e 94 8b 02 	call	0x516	; 0x516 <twi_start>
     8fa:	88 23       	and	r24, r24
     8fc:	11 f0       	breq	.+4      	; 0x902 <__stack+0x3>
        return 1;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	38 c0       	rjmp	.+112    	; 0x972 <__stack+0x73>
    if(twi_addressRead(address))
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <twi_addressRead>
     908:	88 23       	and	r24, r24
     90a:	21 f0       	breq	.+8      	; 0x914 <__stack+0x15>
    {
        twi_stop();
     90c:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>
        return 1;
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	2f c0       	rjmp	.+94     	; 0x972 <__stack+0x73>
    }

    if(len>1 && twi_readAckBurst(data, len-1)!=len-1)
     914:	8c 81       	ldd	r24, Y+4	; 0x04
     916:	9d 81       	ldd	r25, Y+5	; 0x05
     918:	02 97       	sbiw	r24, 0x02	; 2
     91a:	a8 f0       	brcs	.+42     	; 0x946 <__stack+0x47>
     91c:	8c 81       	ldd	r24, Y+4	; 0x04
     91e:	9d 81       	ldd	r25, Y+5	; 0x05
     920:	9c 01       	movw	r18, r24
     922:	21 50       	subi	r18, 0x01	; 1
     924:	31 09       	sbc	r19, r1
     926:	8a 81       	ldd	r24, Y+2	; 0x02
     928:	9b 81       	ldd	r25, Y+3	; 0x03
     92a:	b9 01       	movw	r22, r18
     92c:	0e 94 a1 03 	call	0x742	; 0x742 <twi_readAckBurst>
     930:	9c 01       	movw	r18, r24
     932:	8c 81       	ldd	r24, Y+4	; 0x04
     934:	9d 81       	ldd	r25, Y+5	; 0x05
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	28 17       	cp	r18, r24
     93a:	39 07       	cpc	r19, r25
     93c:	21 f0       	breq	.+8      	; 0x946 <__stack+0x47>
    {
        twi_stop();
     93e:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>
        return 1;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	16 c0       	rjmp	.+44     	; 0x972 <__stack+0x73>
    }
    if(len>0 && twi_readNoAck(&data[len-1]))
     946:	8c 81       	ldd	r24, Y+4	; 0x04
     948:	9d 81       	ldd	r25, Y+5	; 0x05
     94a:	89 2b       	or	r24, r25
     94c:	79 f0       	breq	.+30     	; 0x96c <__stack+0x6d>
     94e:	8c 81       	ldd	r24, Y+4	; 0x04
     950:	9d 81       	ldd	r25, Y+5	; 0x05
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	2a 81       	ldd	r18, Y+2	; 0x02
     956:	3b 81       	ldd	r19, Y+3	; 0x03
     958:	82 0f       	add	r24, r18
     95a:	93 1f       	adc	r25, r19
     95c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <twi_readNoAck>
     960:	88 23       	and	r24, r24
     962:	21 f0       	breq	.+8      	; 0x96c <__stack+0x6d>
    {
        twi_stop();
     964:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>
        return 1;
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	03 c0       	rjmp	.+6      	; 0x972 <__stack+0x73>
    }

    twi_stop();
     96c:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>

    return 0;
     970:	80 e0       	ldi	r24, 0x00	; 0
}
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <twi_writeToSlaveRegister>:

bool twi_writeToSlaveRegister(uint8_t address, uint8_t reg,
    uint8_t *data, size_t len)
{
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	00 d0       	rcall	.+0      	; 0x988 <twi_writeToSlaveRegister+0x6>
     988:	00 d0       	rcall	.+0      	; 0x98a <twi_writeToSlaveRegister+0x8>
     98a:	00 d0       	rcall	.+0      	; 0x98c <twi_writeToSlaveRegister+0xa>
     98c:	cd b7       	in	r28, 0x3d	; 61
     98e:	de b7       	in	r29, 0x3e	; 62
     990:	89 83       	std	Y+1, r24	; 0x01
     992:	6a 83       	std	Y+2, r22	; 0x02
     994:	5c 83       	std	Y+4, r21	; 0x04
     996:	4b 83       	std	Y+3, r20	; 0x03
     998:	3e 83       	std	Y+6, r19	; 0x06
     99a:	2d 83       	std	Y+5, r18	; 0x05
    if(twi_start())
     99c:	0e 94 8b 02 	call	0x516	; 0x516 <twi_start>
     9a0:	88 23       	and	r24, r24
     9a2:	11 f0       	breq	.+4      	; 0x9a8 <twi_writeToSlaveRegister+0x26>
        return 1;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	26 c0       	rjmp	.+76     	; 0x9f4 <twi_writeToSlaveRegister+0x72>
    if(twi_addressWrite(address))
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	0e 94 ce 02 	call	0x59c	; 0x59c <twi_addressWrite>
     9ae:	88 23       	and	r24, r24
     9b0:	21 f0       	breq	.+8      	; 0x9ba <twi_writeToSlaveRegister+0x38>
    {
        twi_stop();
     9b2:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>
        return 1;
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	1d c0       	rjmp	.+58     	; 0x9f4 <twi_writeToSlaveRegister+0x72>
    }

    if(twi_write(reg))
     9ba:	8a 81       	ldd	r24, Y+2	; 0x02
     9bc:	0e 94 1c 03 	call	0x638	; 0x638 <twi_write>
     9c0:	88 23       	and	r24, r24
     9c2:	21 f0       	breq	.+8      	; 0x9cc <twi_writeToSlaveRegister+0x4a>
    {
        twi_stop();
     9c4:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>
        return 1;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	14 c0       	rjmp	.+40     	; 0x9f4 <twi_writeToSlaveRegister+0x72>
    }
    if(twi_writeBurst(data, len) != len)
     9cc:	2d 81       	ldd	r18, Y+5	; 0x05
     9ce:	3e 81       	ldd	r19, Y+6	; 0x06
     9d0:	8b 81       	ldd	r24, Y+3	; 0x03
     9d2:	9c 81       	ldd	r25, Y+4	; 0x04
     9d4:	b9 01       	movw	r22, r18
     9d6:	0e 94 3f 03 	call	0x67e	; 0x67e <twi_writeBurst>
     9da:	9c 01       	movw	r18, r24
     9dc:	8d 81       	ldd	r24, Y+5	; 0x05
     9de:	9e 81       	ldd	r25, Y+6	; 0x06
     9e0:	82 17       	cp	r24, r18
     9e2:	93 07       	cpc	r25, r19
     9e4:	21 f0       	breq	.+8      	; 0x9ee <twi_writeToSlaveRegister+0x6c>
    {
        twi_stop();
     9e6:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>
        return 1;
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <twi_writeToSlaveRegister+0x72>
    }

    twi_stop();
     9ee:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>

    return 0;
     9f2:	80 e0       	ldi	r24, 0x00	; 0
}
     9f4:	26 96       	adiw	r28, 0x06	; 6
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	cd bf       	out	0x3d, r28	; 61
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	08 95       	ret

00000a06 <twi_readFromSlaveRegister>:

bool twi_readFromSlaveRegister(uint8_t address, uint8_t reg,
    uint8_t *data, size_t len)
{
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	00 d0       	rcall	.+0      	; 0xa0c <twi_readFromSlaveRegister+0x6>
     a0c:	00 d0       	rcall	.+0      	; 0xa0e <twi_readFromSlaveRegister+0x8>
     a0e:	00 d0       	rcall	.+0      	; 0xa10 <twi_readFromSlaveRegister+0xa>
     a10:	cd b7       	in	r28, 0x3d	; 61
     a12:	de b7       	in	r29, 0x3e	; 62
     a14:	89 83       	std	Y+1, r24	; 0x01
     a16:	6a 83       	std	Y+2, r22	; 0x02
     a18:	5c 83       	std	Y+4, r21	; 0x04
     a1a:	4b 83       	std	Y+3, r20	; 0x03
     a1c:	3e 83       	std	Y+6, r19	; 0x06
     a1e:	2d 83       	std	Y+5, r18	; 0x05
    if(twi_start())
     a20:	0e 94 8b 02 	call	0x516	; 0x516 <twi_start>
     a24:	88 23       	and	r24, r24
     a26:	11 f0       	breq	.+4      	; 0xa2c <twi_readFromSlaveRegister+0x26>
        return 1;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	50 c0       	rjmp	.+160    	; 0xacc <twi_readFromSlaveRegister+0xc6>
    if(twi_addressWrite(address))
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	0e 94 ce 02 	call	0x59c	; 0x59c <twi_addressWrite>
     a32:	88 23       	and	r24, r24
     a34:	21 f0       	breq	.+8      	; 0xa3e <twi_readFromSlaveRegister+0x38>
    {
        twi_stop();
     a36:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>
        return 1;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	47 c0       	rjmp	.+142    	; 0xacc <twi_readFromSlaveRegister+0xc6>
    }
    if(twi_write(reg))
     a3e:	8a 81       	ldd	r24, Y+2	; 0x02
     a40:	0e 94 1c 03 	call	0x638	; 0x638 <twi_write>
     a44:	88 23       	and	r24, r24
     a46:	21 f0       	breq	.+8      	; 0xa50 <twi_readFromSlaveRegister+0x4a>
    {
        twi_stop();
     a48:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>
        return 1;
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	3e c0       	rjmp	.+124    	; 0xacc <twi_readFromSlaveRegister+0xc6>
    }


    if(twi_repStart())
     a50:	0e 94 a6 02 	call	0x54c	; 0x54c <twi_repStart>
     a54:	88 23       	and	r24, r24
     a56:	11 f0       	breq	.+4      	; 0xa5c <twi_readFromSlaveRegister+0x56>
        return 1;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	38 c0       	rjmp	.+112    	; 0xacc <twi_readFromSlaveRegister+0xc6>
    if(twi_addressRead(address))
     a5c:	89 81       	ldd	r24, Y+1	; 0x01
     a5e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <twi_addressRead>
     a62:	88 23       	and	r24, r24
     a64:	21 f0       	breq	.+8      	; 0xa6e <twi_readFromSlaveRegister+0x68>
    {
        twi_stop();
     a66:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>
        return 1;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	2f c0       	rjmp	.+94     	; 0xacc <twi_readFromSlaveRegister+0xc6>
    }

    if(len>1 && twi_readAckBurst(data, len-1)!=len-1)
     a6e:	8d 81       	ldd	r24, Y+5	; 0x05
     a70:	9e 81       	ldd	r25, Y+6	; 0x06
     a72:	02 97       	sbiw	r24, 0x02	; 2
     a74:	a8 f0       	brcs	.+42     	; 0xaa0 <twi_readFromSlaveRegister+0x9a>
     a76:	8d 81       	ldd	r24, Y+5	; 0x05
     a78:	9e 81       	ldd	r25, Y+6	; 0x06
     a7a:	9c 01       	movw	r18, r24
     a7c:	21 50       	subi	r18, 0x01	; 1
     a7e:	31 09       	sbc	r19, r1
     a80:	8b 81       	ldd	r24, Y+3	; 0x03
     a82:	9c 81       	ldd	r25, Y+4	; 0x04
     a84:	b9 01       	movw	r22, r18
     a86:	0e 94 a1 03 	call	0x742	; 0x742 <twi_readAckBurst>
     a8a:	9c 01       	movw	r18, r24
     a8c:	8d 81       	ldd	r24, Y+5	; 0x05
     a8e:	9e 81       	ldd	r25, Y+6	; 0x06
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	28 17       	cp	r18, r24
     a94:	39 07       	cpc	r19, r25
     a96:	21 f0       	breq	.+8      	; 0xaa0 <twi_readFromSlaveRegister+0x9a>
    {
        twi_stop();
     a98:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>
        return 1;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	16 c0       	rjmp	.+44     	; 0xacc <twi_readFromSlaveRegister+0xc6>
    }
    if(len>0 && twi_readNoAck(&data[len-1]))
     aa0:	8d 81       	ldd	r24, Y+5	; 0x05
     aa2:	9e 81       	ldd	r25, Y+6	; 0x06
     aa4:	89 2b       	or	r24, r25
     aa6:	79 f0       	breq	.+30     	; 0xac6 <twi_readFromSlaveRegister+0xc0>
     aa8:	8d 81       	ldd	r24, Y+5	; 0x05
     aaa:	9e 81       	ldd	r25, Y+6	; 0x06
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	2b 81       	ldd	r18, Y+3	; 0x03
     ab0:	3c 81       	ldd	r19, Y+4	; 0x04
     ab2:	82 0f       	add	r24, r18
     ab4:	93 1f       	adc	r25, r19
     ab6:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <twi_readNoAck>
     aba:	88 23       	and	r24, r24
     abc:	21 f0       	breq	.+8      	; 0xac6 <twi_readFromSlaveRegister+0xc0>
    {
        twi_stop();
     abe:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>
        return 1;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	03 c0       	rjmp	.+6      	; 0xacc <twi_readFromSlaveRegister+0xc6>
    }

    twi_stop();
     ac6:	0e 94 c1 02 	call	0x582	; 0x582 <twi_stop>

    return 0;
     aca:	80 e0       	ldi	r24, 0x00	; 0
}
     acc:	26 96       	adiw	r28, 0x06	; 6
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	de bf       	out	0x3e, r29	; 62
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	cd bf       	out	0x3d, r28	; 61
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <uart_putchar>:
/***********************************************************************/

/* STDIO redirection of printf to appropriate UART.
 * Note that TX line is always enabled and disabled
   after each transmission (function call)*/
static int uart_putchar(char c, FILE *stream) {
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	00 d0       	rcall	.+0      	; 0xae4 <uart_putchar+0x6>
     ae4:	0f 92       	push	r0
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
     aea:	89 83       	std	Y+1, r24	; 0x01
     aec:	7b 83       	std	Y+3, r23	; 0x03
     aee:	6a 83       	std	Y+2, r22	; 0x02

    /* Enable TX line */
    UCSR0B|= (1 << TXEN0);
     af0:	81 ec       	ldi	r24, 0xC1	; 193
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	fc 01       	movw	r30, r24
     af6:	20 81       	ld	r18, Z
     af8:	81 ec       	ldi	r24, 0xC1	; 193
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	28 60       	ori	r18, 0x08	; 8
     afe:	fc 01       	movw	r30, r24
     b00:	20 83       	st	Z, r18

    /* Start UART transmission - fill buffer*/
    UDR0 = c;
     b02:	86 ec       	ldi	r24, 0xC6	; 198
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	29 81       	ldd	r18, Y+1	; 0x01
     b08:	fc 01       	movw	r30, r24
     b0a:	20 83       	st	Z, r18

    while (UART_BUFF_BUSY){
     b0c:	00 00       	nop
     b0e:	80 ec       	ldi	r24, 0xC0	; 192
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	fc 01       	movw	r30, r24
     b14:	80 81       	ld	r24, Z
     b16:	88 2f       	mov	r24, r24
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	80 72       	andi	r24, 0x20	; 32
     b1c:	99 27       	eor	r25, r25
     b1e:	89 2b       	or	r24, r25
     b20:	b1 f3       	breq	.-20     	; 0xb0e <uart_putchar+0x30>
        /* Do nothing - stuck here*/
    }

    /* Disable TX line */
    UCSR0B&=~(1 << TXEN0);
     b22:	81 ec       	ldi	r24, 0xC1	; 193
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	fc 01       	movw	r30, r24
     b28:	20 81       	ld	r18, Z
     b2a:	81 ec       	ldi	r24, 0xC1	; 193
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	27 7f       	andi	r18, 0xF7	; 247
     b30:	fc 01       	movw	r30, r24
     b32:	20 83       	st	Z, r18

    return 0;
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
}
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	08 95       	ret

00000b44 <uart_enter_critical>:
/* @brief Disable UART interrupt (so its ISR)
 *
 *
 */
static void uart_enter_critical(void) {
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
    UCSR0B &=~(1 << RXCIE0);
     b4c:	81 ec       	ldi	r24, 0xC1	; 193
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	fc 01       	movw	r30, r24
     b52:	20 81       	ld	r18, Z
     b54:	81 ec       	ldi	r24, 0xC1	; 193
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	2f 77       	andi	r18, 0x7F	; 127
     b5a:	fc 01       	movw	r30, r24
     b5c:	20 83       	st	Z, r18
}
     b5e:	00 00       	nop
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <uart_exit_critical>:
/* @brief Enable UART interrupt (so its ISR)
 *
 *
 */
static void uart_exit_critical(void) {
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
    UCSR0B |=(1 << RXCIE0);
     b6e:	81 ec       	ldi	r24, 0xC1	; 193
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	fc 01       	movw	r30, r24
     b74:	20 81       	ld	r18, Z
     b76:	81 ec       	ldi	r24, 0xC1	; 193
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	20 68       	ori	r18, 0x80	; 128
     b7c:	fc 01       	movw	r30, r24
     b7e:	20 83       	st	Z, r18
}
     b80:	00 00       	nop
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <__vector_18>:
 *
 * @sa uart_received_LF
 * @sa uart_copy_buffer
 *
 */
ISR(USART_RX_vect){
     b88:	1f 92       	push	r1
     b8a:	0f 92       	push	r0
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	0f 92       	push	r0
     b90:	11 24       	eor	r1, r1
     b92:	2f 93       	push	r18
     b94:	3f 93       	push	r19
     b96:	4f 93       	push	r20
     b98:	5f 93       	push	r21
     b9a:	6f 93       	push	r22
     b9c:	7f 93       	push	r23
     b9e:	8f 93       	push	r24
     ba0:	9f 93       	push	r25
     ba2:	af 93       	push	r26
     ba4:	bf 93       	push	r27
     ba6:	ef 93       	push	r30
     ba8:	ff 93       	push	r31
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62

    inner_buffer[inner_buff_i] = UDR0;
     bb2:	26 ec       	ldi	r18, 0xC6	; 198
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <inner_buff_i>
     bba:	88 2f       	mov	r24, r24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	f9 01       	movw	r30, r18
     bc0:	20 81       	ld	r18, Z
     bc2:	8e 58       	subi	r24, 0x8E	; 142
     bc4:	9e 4f       	sbci	r25, 0xFE	; 254
     bc6:	fc 01       	movw	r30, r24
     bc8:	20 83       	st	Z, r18

    if(inner_buffer[inner_buff_i] == '\n') {
     bca:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <inner_buff_i>
     bce:	88 2f       	mov	r24, r24
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	8e 58       	subi	r24, 0x8E	; 142
     bd4:	9e 4f       	sbci	r25, 0xFE	; 254
     bd6:	fc 01       	movw	r30, r24
     bd8:	80 81       	ld	r24, Z
     bda:	8a 30       	cpi	r24, 0x0A	; 10
     bdc:	41 f4       	brne	.+16     	; 0xbee <__vector_18+0x66>
            uart_enter_critical();
     bde:	0e 94 a2 05 	call	0xb44	; 0xb44 <uart_enter_critical>
            uart_lf_flag = 1;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <uart_lf_flag+0x1>
     bea:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <uart_lf_flag>
    }

    if(inner_buff_i < UART_RX_BUFF_SIZE - 1) {
     bee:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <inner_buff_i>
     bf2:	8f 33       	cpi	r24, 0x3F	; 63
     bf4:	30 f4       	brcc	.+12     	; 0xc02 <__vector_18+0x7a>
        inner_buff_i++;
     bf6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <inner_buff_i>
     bfa:	8f 5f       	subi	r24, 0xFF	; 255
     bfc:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <inner_buff_i>
        }
    else {
        uart_enter_critical();
        uart_lf_flag = 1;
    }
}
     c00:	08 c0       	rjmp	.+16     	; 0xc12 <__vector_18+0x8a>
        uart_enter_critical();
     c02:	0e 94 a2 05 	call	0xb44	; 0xb44 <uart_enter_critical>
        uart_lf_flag = 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <uart_lf_flag+0x1>
     c0e:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <uart_lf_flag>
}
     c12:	00 00       	nop
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	ff 91       	pop	r31
     c1a:	ef 91       	pop	r30
     c1c:	bf 91       	pop	r27
     c1e:	af 91       	pop	r26
     c20:	9f 91       	pop	r25
     c22:	8f 91       	pop	r24
     c24:	7f 91       	pop	r23
     c26:	6f 91       	pop	r22
     c28:	5f 91       	pop	r21
     c2a:	4f 91       	pop	r20
     c2c:	3f 91       	pop	r19
     c2e:	2f 91       	pop	r18
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	0f 90       	pop	r0
     c36:	1f 90       	pop	r1
     c38:	18 95       	reti

00000c3a <UARTinitiliaze>:
 * It is intended to access the transmit stage by stdio
 * printf function, so stdout is customized as well.
 *
 */

void UARTinitiliaze(uint8_t isr_enable_flag) {
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	0f 92       	push	r0
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	89 83       	std	Y+1, r24	; 0x01

    /* Use 8 - bit size of transaction symbol */
    UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
     c46:	82 ec       	ldi	r24, 0xC2	; 194
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	fc 01       	movw	r30, r24
     c4c:	20 81       	ld	r18, Z
     c4e:	82 ec       	ldi	r24, 0xC2	; 194
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	26 60       	ori	r18, 0x06	; 6
     c54:	fc 01       	movw	r30, r24
     c56:	20 83       	st	Z, r18
    /* Upper part of bitrate 57600*/
    UBRR0H |= (BAUD_PRESCALE >> 8);
     c58:	25 ec       	ldi	r18, 0xC5	; 197
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	85 ec       	ldi	r24, 0xC5	; 197
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	f9 01       	movw	r30, r18
     c62:	20 81       	ld	r18, Z
     c64:	fc 01       	movw	r30, r24
     c66:	20 83       	st	Z, r18
    /* Lower part of bitrate 57600 */
    UBRR0L |= BAUD_PRESCALE;
     c68:	84 ec       	ldi	r24, 0xC4	; 196
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	fc 01       	movw	r30, r24
     c6e:	20 81       	ld	r18, Z
     c70:	84 ec       	ldi	r24, 0xC4	; 196
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	20 61       	ori	r18, 0x10	; 16
     c76:	fc 01       	movw	r30, r24
     c78:	20 83       	st	Z, r18
    /* Enable Interrupt on receive */
    if(isr_enable_flag) {
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	88 23       	and	r24, r24
     c7e:	49 f0       	breq	.+18     	; 0xc92 <UARTinitiliaze+0x58>
            UCSR0B |= (1 << RXCIE0);
     c80:	81 ec       	ldi	r24, 0xC1	; 193
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	fc 01       	movw	r30, r24
     c86:	20 81       	ld	r18, Z
     c88:	81 ec       	ldi	r24, 0xC1	; 193
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	20 68       	ori	r18, 0x80	; 128
     c8e:	fc 01       	movw	r30, r24
     c90:	20 83       	st	Z, r18
    }
    /* Force off the TX and RX for further enabling */
    //UCSR0B &= ~(1 << RXEN0) | ~(1 << TXEN0);

    /* Redirect output direction of stdio*/
    stdout = &mystdout;
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <__iob+0x3>
     c9a:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <__iob+0x2>
}
     c9e:	00 00       	nop
     ca0:	0f 90       	pop	r0
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <UARTisLFreceived>:
 * Function checks whether uart_lf_flag triggered by
 * uart_copy_buffer has been set (<LF> received). In
 * Valid case, function returns 1 and resets this flag.
 *
 */
uint8_t UARTisLFreceived(void) {
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	0f 92       	push	r0
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
    uint8_t result = 0;
     cb2:	19 82       	std	Y+1, r1	; 0x01
    if(uart_lf_flag) {
     cb4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <uart_lf_flag>
     cb8:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <uart_lf_flag+0x1>
     cbc:	89 2b       	or	r24, r25
     cbe:	29 f0       	breq	.+10     	; 0xcca <UARTisLFreceived+0x22>
        result = uart_lf_flag;
     cc0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <uart_lf_flag>
     cc4:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <uart_lf_flag+0x1>
     cc8:	89 83       	std	Y+1, r24	; 0x01
    }
    return result;
     cca:	89 81       	ldd	r24, Y+1	; 0x01
}
     ccc:	0f 90       	pop	r0
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <UARTcopyBuffer>:
 * is NULL pointer. Maximal length of copied data
 * is determined by UART_RX_BUFF_SIZE - prevent
 * potential overflow passing sufficient buffer.
 *
 */
uint8_t UARTcopyBuffer(uint8_t * buffer){
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	00 d0       	rcall	.+0      	; 0xcda <UARTcopyBuffer+0x6>
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	9b 83       	std	Y+3, r25	; 0x03
     ce2:	8a 83       	std	Y+2, r24	; 0x02

    uart_enter_critical();
     ce4:	0e 94 a2 05 	call	0xb44	; 0xb44 <uart_enter_critical>

    uint8_t result = 0;
     ce8:	19 82       	std	Y+1, r1	; 0x01
    if(buffer == NULL) {
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	9b 81       	ldd	r25, Y+3	; 0x03
     cee:	89 2b       	or	r24, r25
     cf0:	11 f4       	brne	.+4      	; 0xcf6 <UARTcopyBuffer+0x22>
        return -1;
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	22 c0       	rjmp	.+68     	; 0xd3a <UARTcopyBuffer+0x66>
    }

    memcpy(buffer, (uint8_t*)inner_buffer, inner_buff_i);
     cf6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <inner_buff_i>
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	9b 81       	ldd	r25, Y+3	; 0x03
     d02:	a9 01       	movw	r20, r18
     d04:	62 e7       	ldi	r22, 0x72	; 114
     d06:	71 e0       	ldi	r23, 0x01	; 1
     d08:	0e 94 18 0c 	call	0x1830	; 0x1830 <memcpy>
    memset((uint8_t*)inner_buffer, '\0', inner_buff_i);
     d0c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <inner_buff_i>
     d10:	88 2f       	mov	r24, r24
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	ac 01       	movw	r20, r24
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	82 e7       	ldi	r24, 0x72	; 114
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	0e 94 21 0c 	call	0x1842	; 0x1842 <memset>
    inner_buff_i = 0;
     d22:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <inner_buff_i>
    uart_lf_flag = 0;
     d26:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <uart_lf_flag+0x1>
     d2a:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <uart_lf_flag>
    result = inner_buff_i;
     d2e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <inner_buff_i>
     d32:	89 83       	std	Y+1, r24	; 0x01

    uart_exit_critical();
     d34:	0e 94 b3 05 	call	0xb66	; 0xb66 <uart_exit_critical>

    return result;
     d38:	89 81       	ldd	r24, Y+1	; 0x01
}
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <UARTFetchReceivedLine>:
/* @brief
 *
 * @return
 *
 */
uint8_t* UARTFetchReceivedLine(void) {
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <UARTFetchReceivedLine+0x6>
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62

    static uint8_t uart_received[UART_RX_BUFF_SIZE] = {0};

    uint8_t* pBuff = NULL;
     d50:	1a 82       	std	Y+2, r1	; 0x02
     d52:	19 82       	std	Y+1, r1	; 0x01

    if(UARTisLFreceived()) {
     d54:	0e 94 54 06 	call	0xca8	; 0xca8 <UARTisLFreceived>
     d58:	88 23       	and	r24, r24
     d5a:	41 f0       	breq	.+16     	; 0xd6c <UARTFetchReceivedLine+0x26>
        UARTcopyBuffer(uart_received);
     d5c:	83 eb       	ldi	r24, 0xB3	; 179
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <UARTcopyBuffer>
        pBuff = uart_received;
     d64:	83 eb       	ldi	r24, 0xB3	; 179
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	9a 83       	std	Y+2, r25	; 0x02
     d6a:	89 83       	std	Y+1, r24	; 0x01
    }
    return pBuff;
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <CheckAndAssign>:
    {CMD_METHOD_GET, CMD_RDA5807M_RSSI, CmdRDA5807mGetRSSI}
};

static inline void CheckAndAssign(const CmdDisp_t * const ctab,
                                  const uint8_t* const pStrCmd,
                                  const uint8_t idx) {
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <CheckAndAssign+0x6>
     d80:	00 d0       	rcall	.+0      	; 0xd82 <CheckAndAssign+0x8>
     d82:	0f 92       	push	r0
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	9a 83       	std	Y+2, r25	; 0x02
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	7c 83       	std	Y+4, r23	; 0x04
     d8e:	6b 83       	std	Y+3, r22	; 0x03
     d90:	4d 83       	std	Y+5, r20	; 0x05

    if (!memcmp(pStrCmd, ctab[idx].cmdMethod, CMD_METHOD_LNG) &&
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	29 81       	ldd	r18, Y+1	; 0x01
     da6:	3a 81       	ldd	r19, Y+2	; 0x02
     da8:	82 0f       	add	r24, r18
     daa:	93 1f       	adc	r25, r19
     dac:	9c 01       	movw	r18, r24
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	9c 81       	ldd	r25, Y+4	; 0x04
     db2:	42 e0       	ldi	r20, 0x02	; 2
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	b9 01       	movw	r22, r18
     db8:	0e 94 0b 0c 	call	0x1816	; 0x1816 <memcmp>
     dbc:	89 2b       	or	r24, r25
     dbe:	79 f5       	brne	.+94     	; 0xe1e <CheckAndAssign+0xa4>
        !memcmp(pStrCmd + CMD_METHOD_LNG + CMD_DELIMITER_LNG, ctab[idx].cmdName, CMD_NAME_LNG)) {
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
     dc2:	88 2f       	mov	r24, r24
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	29 81       	ldd	r18, Y+1	; 0x01
     dd4:	3a 81       	ldd	r19, Y+2	; 0x02
     dd6:	82 0f       	add	r24, r18
     dd8:	93 1f       	adc	r25, r19
     dda:	9c 01       	movw	r18, r24
     ddc:	2e 5f       	subi	r18, 0xFE	; 254
     dde:	3f 4f       	sbci	r19, 0xFF	; 255
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	9c 81       	ldd	r25, Y+4	; 0x04
     de4:	03 96       	adiw	r24, 0x03	; 3
     de6:	44 e0       	ldi	r20, 0x04	; 4
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	b9 01       	movw	r22, r18
     dec:	0e 94 0b 0c 	call	0x1816	; 0x1816 <memcmp>
    if (!memcmp(pStrCmd, ctab[idx].cmdMethod, CMD_METHOD_LNG) &&
     df0:	89 2b       	or	r24, r25
     df2:	a9 f4       	brne	.+42     	; 0xe1e <CheckAndAssign+0xa4>
            ctab[idx].cmdFunc(pStrCmd, 0);
     df4:	8d 81       	ldd	r24, Y+5	; 0x05
     df6:	88 2f       	mov	r24, r24
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	29 81       	ldd	r18, Y+1	; 0x01
     e08:	3a 81       	ldd	r19, Y+2	; 0x02
     e0a:	82 0f       	add	r24, r18
     e0c:	93 1f       	adc	r25, r19
     e0e:	fc 01       	movw	r30, r24
     e10:	26 81       	ldd	r18, Z+6	; 0x06
     e12:	37 81       	ldd	r19, Z+7	; 0x07
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	9c 81       	ldd	r25, Y+4	; 0x04
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	f9 01       	movw	r30, r18
     e1c:	09 95       	icall
        }
}
     e1e:	00 00       	nop
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	08 95       	ret

00000e30 <CmdDispatch>:

uint8_t CmdDispatch(const uint8_t* const pStrCmd, const uint8_t lng) {
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	00 d0       	rcall	.+0      	; 0xe36 <CmdDispatch+0x6>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <CmdDispatch+0x8>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9b 83       	std	Y+3, r25	; 0x03
     e3e:	8a 83       	std	Y+2, r24	; 0x02
     e40:	6c 83       	std	Y+4, r22	; 0x04

    for(uint8_t idx = 0; idx < CMD_TABLE_SIZE; idx++) {
     e42:	19 82       	std	Y+1, r1	; 0x01
     e44:	0b c0       	rjmp	.+22     	; 0xe5c <CmdDispatch+0x2c>
        CheckAndAssign(cmdTable, pStrCmd, idx);
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	9b 81       	ldd	r25, Y+3	; 0x03
     e4a:	49 81       	ldd	r20, Y+1	; 0x01
     e4c:	bc 01       	movw	r22, r24
     e4e:	8e e0       	ldi	r24, 0x0E	; 14
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	0e 94 bd 06 	call	0xd7a	; 0xd7a <CheckAndAssign>
    for(uint8_t idx = 0; idx < CMD_TABLE_SIZE; idx++) {
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	8f 5f       	subi	r24, 0xFF	; 255
     e5a:	89 83       	std	Y+1, r24	; 0x01
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	86 30       	cpi	r24, 0x06	; 6
     e60:	90 f3       	brcs	.-28     	; 0xe46 <CmdDispatch+0x16>
    }

    return CMD_RET_OK;
     e62:	80 e0       	ldi	r24, 0x00	; 0
}
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	08 95       	ret

00000e72 <CmdRDA5807mDoInit>:
#include "stdio.h"

#define LINE_FEED           ((char)('\n'))
#define COLON               ((char)(':'))

uint8_t CmdRDA5807mDoInit(const uint8_t* const pStrCmd, const uint8_t lng) {
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	00 d0       	rcall	.+0      	; 0xe78 <CmdRDA5807mDoInit+0x6>
     e78:	0f 92       	push	r0
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	9a 83       	std	Y+2, r25	; 0x02
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	6b 83       	std	Y+3, r22	; 0x03

    RDA5807mInit();
     e84:	0e 94 17 09 	call	0x122e	; 0x122e <RDA5807mInit>

	return CMD_RET_OK;
     e88:	80 e0       	ldi	r24, 0x00	; 0
}
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	08 95       	ret

00000e96 <CmdRDA5807mDoReset>:

uint8_t CmdRDA5807mDoReset(const uint8_t* const pStrCmd, const uint8_t lng) {
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <CmdRDA5807mDoReset+0x6>
     e9c:	0f 92       	push	r0
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	6b 83       	std	Y+3, r22	; 0x03

    RDA5807mReset();
     ea8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <RDA5807mReset>

	return CMD_RET_OK;
     eac:	80 e0       	ldi	r24, 0x00	; 0
}
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <CmdRDA5807mSetMute>:

uint8_t CmdRDA5807mSetMute(const uint8_t* const pStrCmd, const uint8_t lng) {
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <CmdRDA5807mSetMute+0x6>
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <CmdRDA5807mSetMute+0x8>
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	9b 83       	std	Y+3, r25	; 0x03
     ec8:	8a 83       	std	Y+2, r24	; 0x02
     eca:	6c 83       	std	Y+4, r22	; 0x04

    uint8_t mute = pStrCmd[CMD_ARG_OFFSET + 0] - '0';
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	9b 81       	ldd	r25, Y+3	; 0x03
     ed0:	08 96       	adiw	r24, 0x08	; 8
     ed2:	fc 01       	movw	r30, r24
     ed4:	80 81       	ld	r24, Z
     ed6:	80 53       	subi	r24, 0x30	; 48
     ed8:	89 83       	std	Y+1, r24	; 0x01

    RDA5807mMute(mute);
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	0e 94 ce 08 	call	0x119c	; 0x119c <RDA5807mMute>

	return CMD_RET_OK;
     ee0:	80 e0       	ldi	r24, 0x00	; 0
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	08 95       	ret

00000ef0 <CmdRDA5807mSetFreq>:

uint8_t CmdRDA5807mSetFreq(const uint8_t* const pStrCmd, const uint8_t lng) {
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <CmdRDA5807mSetFreq+0x6>
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <CmdRDA5807mSetFreq+0x8>
     ef8:	0f 92       	push	r0
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	9c 83       	std	Y+4, r25	; 0x04
     f00:	8b 83       	std	Y+3, r24	; 0x03
     f02:	6d 83       	std	Y+5, r22	; 0x05

    uint16_t freq;

    freq = (pStrCmd[CMD_ARG_OFFSET + 0] - '0')*10000;
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	08 96       	adiw	r24, 0x08	; 8
     f0a:	fc 01       	movw	r30, r24
     f0c:	80 81       	ld	r24, Z
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	ac 01       	movw	r20, r24
     f14:	40 53       	subi	r20, 0x30	; 48
     f16:	51 09       	sbc	r21, r1
     f18:	20 e1       	ldi	r18, 0x10	; 16
     f1a:	37 e2       	ldi	r19, 0x27	; 39
     f1c:	42 9f       	mul	r20, r18
     f1e:	c0 01       	movw	r24, r0
     f20:	43 9f       	mul	r20, r19
     f22:	90 0d       	add	r25, r0
     f24:	52 9f       	mul	r21, r18
     f26:	90 0d       	add	r25, r0
     f28:	11 24       	eor	r1, r1
     f2a:	9a 83       	std	Y+2, r25	; 0x02
     f2c:	89 83       	std	Y+1, r24	; 0x01
    freq += (pStrCmd[CMD_ARG_OFFSET + 1] - '0')*1000;
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	09 96       	adiw	r24, 0x09	; 9
     f34:	fc 01       	movw	r30, r24
     f36:	80 81       	ld	r24, Z
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	9c 01       	movw	r18, r24
     f3e:	20 53       	subi	r18, 0x30	; 48
     f40:	31 09       	sbc	r19, r1
     f42:	88 ee       	ldi	r24, 0xE8	; 232
     f44:	93 e0       	ldi	r25, 0x03	; 3
     f46:	28 9f       	mul	r18, r24
     f48:	a0 01       	movw	r20, r0
     f4a:	29 9f       	mul	r18, r25
     f4c:	50 0d       	add	r21, r0
     f4e:	38 9f       	mul	r19, r24
     f50:	50 0d       	add	r21, r0
     f52:	11 24       	eor	r1, r1
     f54:	9a 01       	movw	r18, r20
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	82 0f       	add	r24, r18
     f5c:	93 1f       	adc	r25, r19
     f5e:	9a 83       	std	Y+2, r25	; 0x02
     f60:	89 83       	std	Y+1, r24	; 0x01
    freq += (pStrCmd[CMD_ARG_OFFSET + 2] - '0')*100;
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	0a 96       	adiw	r24, 0x0a	; 10
     f68:	fc 01       	movw	r30, r24
     f6a:	80 81       	ld	r24, Z
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	c0 97       	sbiw	r24, 0x30	; 48
     f72:	44 e6       	ldi	r20, 0x64	; 100
     f74:	48 9f       	mul	r20, r24
     f76:	90 01       	movw	r18, r0
     f78:	49 9f       	mul	r20, r25
     f7a:	30 0d       	add	r19, r0
     f7c:	11 24       	eor	r1, r1
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	82 0f       	add	r24, r18
     f84:	93 1f       	adc	r25, r19
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
    freq += (pStrCmd[CMD_ARG_OFFSET + 3] - '0')*10;
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	9c 81       	ldd	r25, Y+4	; 0x04
     f8e:	0b 96       	adiw	r24, 0x0b	; 11
     f90:	fc 01       	movw	r30, r24
     f92:	80 81       	ld	r24, Z
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	9c 01       	movw	r18, r24
     f9a:	20 53       	subi	r18, 0x30	; 48
     f9c:	31 09       	sbc	r19, r1
     f9e:	c9 01       	movw	r24, r18
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	82 0f       	add	r24, r18
     faa:	93 1f       	adc	r25, r19
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	9c 01       	movw	r18, r24
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	82 0f       	add	r24, r18
     fb8:	93 1f       	adc	r25, r19
     fba:	9a 83       	std	Y+2, r25	; 0x02
     fbc:	89 83       	std	Y+1, r24	; 0x01
    freq += (pStrCmd[CMD_ARG_OFFSET + 4] - '0')*1;
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	9c 81       	ldd	r25, Y+4	; 0x04
     fc2:	0c 96       	adiw	r24, 0x0c	; 12
     fc4:	fc 01       	movw	r30, r24
     fc6:	80 81       	ld	r24, Z
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
     fd0:	82 0f       	add	r24, r18
     fd2:	93 1f       	adc	r25, r19
     fd4:	c0 97       	sbiw	r24, 0x30	; 48
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	89 83       	std	Y+1, r24	; 0x01

    RDA5807mSetFreq(freq);
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <RDA5807mSetFreq>

	return CMD_RET_OK;
     fe2:	80 e0       	ldi	r24, 0x00	; 0
}
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <CmdRDA5807mSetVolm>:

uint8_t CmdRDA5807mSetVolm(const uint8_t* const pStrCmd, const uint8_t lng) {
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	00 d0       	rcall	.+0      	; 0xffa <CmdRDA5807mSetVolm+0x6>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <CmdRDA5807mSetVolm+0x8>
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	9b 83       	std	Y+3, r25	; 0x03
    1002:	8a 83       	std	Y+2, r24	; 0x02
    1004:	6c 83       	std	Y+4, r22	; 0x04

    uint8_t volm;

    volm = (pStrCmd[CMD_ARG_OFFSET + 0] - '0')*10;
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	9b 81       	ldd	r25, Y+3	; 0x03
    100a:	08 96       	adiw	r24, 0x08	; 8
    100c:	fc 01       	movw	r30, r24
    100e:	90 81       	ld	r25, Z
    1010:	89 2f       	mov	r24, r25
    1012:	88 0f       	add	r24, r24
    1014:	88 0f       	add	r24, r24
    1016:	89 0f       	add	r24, r25
    1018:	88 0f       	add	r24, r24
    101a:	80 5e       	subi	r24, 0xE0	; 224
    101c:	89 83       	std	Y+1, r24	; 0x01
    volm += (pStrCmd[CMD_ARG_OFFSET + 1] - '0')*1;
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	9b 81       	ldd	r25, Y+3	; 0x03
    1022:	09 96       	adiw	r24, 0x09	; 9
    1024:	fc 01       	movw	r30, r24
    1026:	90 81       	ld	r25, Z
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	89 0f       	add	r24, r25
    102c:	80 53       	subi	r24, 0x30	; 48
    102e:	89 83       	std	Y+1, r24	; 0x01

    RDA5807mSetVolm(volm);
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	0e 94 cf 09 	call	0x139e	; 0x139e <RDA5807mSetVolm>

	return CMD_RET_OK;
    1036:	80 e0       	ldi	r24, 0x00	; 0
}
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	08 95       	ret

00001046 <CmdRDA5807mGetRSSI>:

uint8_t CmdRDA5807mGetRSSI(const uint8_t* const pStrCmd, const uint8_t lng) {
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	00 d0       	rcall	.+0      	; 0x104c <CmdRDA5807mGetRSSI+0x6>
    104c:	00 d0       	rcall	.+0      	; 0x104e <CmdRDA5807mGetRSSI+0x8>
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	9b 83       	std	Y+3, r25	; 0x03
    1054:	8a 83       	std	Y+2, r24	; 0x02
    1056:	6c 83       	std	Y+4, r22	; 0x04

    uint8_t rssi;

    rssi = RDA5807mGetRSSI();
    1058:	0e 94 29 0a 	call	0x1452	; 0x1452 <RDA5807mGetRSSI>
    105c:	89 83       	std	Y+1, r24	; 0x01
    printf("RSSI: %d\n", rssi);
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	29 2f       	mov	r18, r25
    1066:	2f 93       	push	r18
    1068:	8f 93       	push	r24
    106a:	8e e3       	ldi	r24, 0x3E	; 62
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	89 2f       	mov	r24, r25
    1070:	8f 93       	push	r24
    1072:	8e e3       	ldi	r24, 0x3E	; 62
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	8f 93       	push	r24
    1078:	0e 94 28 0c 	call	0x1850	; 0x1850 <printf>
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0

	return CMD_RET_OK;
    1084:	80 e0       	ldi	r24, 0x00	; 0
}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <main>:
#include "main.h"

int main(void)
{
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	00 d0       	rcall	.+0      	; 0x109a <main+0x6>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    UARTinitiliaze(1);
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	0e 94 1d 06 	call	0xc3a	; 0xc3a <UARTinitiliaze>
    tim_tick_initialize();
    10a4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <tim_tick_initialize>
    gpio_initialize();
    10a8:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_initialize>
    twi_init();
    10ac:	0e 94 65 02 	call	0x4ca	; 0x4ca <twi_init>

    sei();
    10b0:	78 94       	sei

    printf("Started\n");
    10b2:	88 e4       	ldi	r24, 0x48	; 72
    10b4:	91 e0       	ldi	r25, 0x01	; 1
    10b6:	0e 94 3c 0c 	call	0x1878	; 0x1878 <puts>

    while(1) {
        uint8_t* pBuff = UARTFetchReceivedLine();
    10ba:	0e 94 a3 06 	call	0xd46	; 0xd46 <UARTFetchReceivedLine>
    10be:	9a 83       	std	Y+2, r25	; 0x02
    10c0:	89 83       	std	Y+1, r24	; 0x01
        if (NULL != pBuff) {
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	9a 81       	ldd	r25, Y+2	; 0x02
    10c6:	89 2b       	or	r24, r25
    10c8:	c1 f3       	breq	.-16     	; 0x10ba <main+0x26>
            //printf((char*)pBuff);
            CmdDispatch(pBuff, 0);
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	9a 81       	ldd	r25, Y+2	; 0x02
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	0e 94 18 07 	call	0xe30	; 0xe30 <CmdDispatch>
    while(1) {
    10d4:	f2 cf       	rjmp	.-28     	; 0x10ba <main+0x26>

000010d6 <RDA5807mGetReg0x0A>:

#define RDS_USED            1

#define swapbytes(byte) ((((byte) & 0x00FF) << 8) | (((byte) & 0xFF00) >> 8))

static uint16_t RDA5807mGetReg0x0A(void) {
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	00 d0       	rcall	.+0      	; 0x10dc <RDA5807mGetReg0x0A+0x6>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62

    uint16_t RDA5807MReg = 0;
    10e0:	1a 82       	std	Y+2, r1	; 0x02
    10e2:	19 82       	std	Y+1, r1	; 0x01

    twi_readFromSlave(RDA5807M_I2C_ADR, (uint8_t*)&RDA5807MReg, RDA5807M_REG_SIZE);
    10e4:	42 e0       	ldi	r20, 0x02	; 2
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	ce 01       	movw	r24, r28
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	bc 01       	movw	r22, r24
    10ee:	80 e1       	ldi	r24, 0x10	; 16
    10f0:	0e 94 6f 04 	call	0x8de	; 0x8de <twi_readFromSlave>
    RDA5807MReg = swapbytes(RDA5807MReg);
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	9a 81       	ldd	r25, Y+2	; 0x02
    10f8:	98 27       	eor	r25, r24
    10fa:	89 27       	eor	r24, r25
    10fc:	98 27       	eor	r25, r24
    10fe:	9a 83       	std	Y+2, r25	; 0x02
    1100:	89 83       	std	Y+1, r24	; 0x01

    printf("0x0A: 0x%04x\n", RDA5807MReg);
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	29 2f       	mov	r18, r25
    1108:	2f 93       	push	r18
    110a:	8f 93       	push	r24
    110c:	80 e5       	ldi	r24, 0x50	; 80
    110e:	91 e0       	ldi	r25, 0x01	; 1
    1110:	89 2f       	mov	r24, r25
    1112:	8f 93       	push	r24
    1114:	80 e5       	ldi	r24, 0x50	; 80
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	8f 93       	push	r24
    111a:	0e 94 28 0c 	call	0x1850	; 0x1850 <printf>
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0

    return RDA5807MReg;
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	9a 81       	ldd	r25, Y+2	; 0x02
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	08 95       	ret

00001134 <RDA5807mGetReg0x0B>:

static uint16_t RDA5807mGetReg0x0B(void) {
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	00 d0       	rcall	.+0      	; 0x113a <RDA5807mGetReg0x0B+0x6>
    113a:	00 d0       	rcall	.+0      	; 0x113c <RDA5807mGetReg0x0B+0x8>
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62

    uint16_t RDA5807MReg[2] = {0};
    1140:	19 82       	std	Y+1, r1	; 0x01
    1142:	1a 82       	std	Y+2, r1	; 0x02
    1144:	1b 82       	std	Y+3, r1	; 0x03
    1146:	1c 82       	std	Y+4, r1	; 0x04

    twi_readFromSlave(RDA5807M_I2C_ADR, (uint8_t*)&RDA5807MReg, RDA5807M_REG_SIZE*2);
    1148:	44 e0       	ldi	r20, 0x04	; 4
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	ce 01       	movw	r24, r28
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	bc 01       	movw	r22, r24
    1152:	80 e1       	ldi	r24, 0x10	; 16
    1154:	0e 94 6f 04 	call	0x8de	; 0x8de <twi_readFromSlave>
    RDA5807MReg[1] = swapbytes(RDA5807MReg[1]);
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	98 27       	eor	r25, r24
    115e:	89 27       	eor	r24, r25
    1160:	98 27       	eor	r25, r24
    1162:	9c 83       	std	Y+4, r25	; 0x04
    1164:	8b 83       	std	Y+3, r24	; 0x03

    printf("0x0B: 0x%04x\n", RDA5807MReg[1]);
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	29 2f       	mov	r18, r25
    116c:	2f 93       	push	r18
    116e:	8f 93       	push	r24
    1170:	8e e5       	ldi	r24, 0x5E	; 94
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	89 2f       	mov	r24, r25
    1176:	8f 93       	push	r24
    1178:	8e e5       	ldi	r24, 0x5E	; 94
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	8f 93       	push	r24
    117e:	0e 94 28 0c 	call	0x1850	; 0x1850 <printf>
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0

    return RDA5807MReg[1];
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	9c 81       	ldd	r25, Y+4	; 0x04
}
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	08 95       	ret

0000119c <RDA5807mMute>:

uint8_t RDA5807mMute(uint8_t mute) {
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <RDA5807mMute+0x6>
    11a2:	0f 92       	push	r0
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	8b 83       	std	Y+3, r24	; 0x03

    uint16_t RDA5807Register;
    /* For Mute only 1st register needed to be accessed */
#if RDS_USED
    RDA5807Register = (1 << DHIZ) | (1 << BASS) | (1 << RCLK_DIR_MODE) | (1 << RDS_EN) | (1 << ENABLE);
    11aa:	89 e0       	ldi	r24, 0x09	; 9
    11ac:	94 e9       	ldi	r25, 0x94	; 148
    11ae:	9a 83       	std	Y+2, r25	; 0x02
    11b0:	89 83       	std	Y+1, r24	; 0x01
#else
    RDA5807Register = (1 << DHIZ) | (1 << BASS) | (1 << RCLK_DIR_MODE) | (1 << ENABLE);
#endif
    if (!mute) {
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	88 23       	and	r24, r24
    11b6:	29 f4       	brne	.+10     	; 0x11c2 <RDA5807mMute+0x26>
        RDA5807Register |= (1 << DMUTE);
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	90 64       	ori	r25, 0x40	; 64
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	89 83       	std	Y+1, r24	; 0x01
    }

    RDA5807Register = swapbytes(RDA5807Register);
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	9a 81       	ldd	r25, Y+2	; 0x02
    11c6:	98 27       	eor	r25, r24
    11c8:	89 27       	eor	r24, r25
    11ca:	98 27       	eor	r25, r24
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01

    twi_writeToSlave(RDA5807M_I2C_ADR, (uint8_t*)&RDA5807Register, RDA5807M_REG_SIZE);
    11d0:	42 e0       	ldi	r20, 0x02	; 2
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	ce 01       	movw	r24, r28
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	bc 01       	movw	r22, r24
    11da:	80 e1       	ldi	r24, 0x10	; 16
    11dc:	0e 94 38 04 	call	0x870	; 0x870 <twi_writeToSlave>

    return RDA5807mFN_OK;
    11e0:	80 e0       	ldi	r24, 0x00	; 0

}
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <RDA5807mReset>:

uint8_t RDA5807mReset(void) {
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <RDA5807mReset+0x6>
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62

    /* For Mute only 1st register needed to be accessed */

    uint16_t RDA5807Register = {0};
    11f8:	1a 82       	std	Y+2, r1	; 0x02
    11fa:	19 82       	std	Y+1, r1	; 0x01
	/* Register REG_ADR_02 */
	RDA5807Register = (1 << SOFT_RESET);
    11fc:	82 e0       	ldi	r24, 0x02	; 2
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	9a 83       	std	Y+2, r25	; 0x02
    1202:	89 83       	std	Y+1, r24	; 0x01

    RDA5807Register = swapbytes(RDA5807Register);
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	98 27       	eor	r25, r24
    120a:	89 27       	eor	r24, r25
    120c:	98 27       	eor	r25, r24
    120e:	9a 83       	std	Y+2, r25	; 0x02
    1210:	89 83       	std	Y+1, r24	; 0x01

    twi_writeToSlave(RDA5807M_I2C_ADR, (uint8_t*)&RDA5807Register, RDA5807M_REG_SIZE);
    1212:	42 e0       	ldi	r20, 0x02	; 2
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	ce 01       	movw	r24, r28
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	bc 01       	movw	r22, r24
    121c:	80 e1       	ldi	r24, 0x10	; 16
    121e:	0e 94 38 04 	call	0x870	; 0x870 <twi_writeToSlave>

    return RDA5807mFN_OK;
    1222:	80 e0       	ldi	r24, 0x00	; 0

}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	08 95       	ret

0000122e <RDA5807mInit>:

uint8_t RDA5807mInit(void) {
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	2d 97       	sbiw	r28, 0x0d	; 13
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61

    /* For complete initialization, 6 (out of 7) registers must be written */
    uint16_t RDA5807Registers[6] = {0};
    1242:	2c e0       	ldi	r18, 0x0C	; 12
    1244:	ce 01       	movw	r24, r28
    1246:	02 96       	adiw	r24, 0x02	; 2
    1248:	fc 01       	movw	r30, r24
    124a:	32 2f       	mov	r19, r18
    124c:	11 92       	st	Z+, r1
    124e:	3a 95       	dec	r19
    1250:	e9 f7       	brne	.-6      	; 0x124c <RDA5807mInit+0x1e>
	/* Register REG_ADR_02 */
#if RDS_USED
    RDA5807Registers[0] = (1 << DHIZ) | (1 << BASS) | (1 << RCLK_DIR_MODE) | (1 << RDS_EN) | (1 << ENABLE);
    1252:	89 e0       	ldi	r24, 0x09	; 9
    1254:	94 e9       	ldi	r25, 0x94	; 148
    1256:	9b 83       	std	Y+3, r25	; 0x03
    1258:	8a 83       	std	Y+2, r24	; 0x02
#else
    RDA5807Registers[0] = (1 << DHIZ) | (1 << BASS) | (1 << RCLK_DIR_MODE) | (1 << ENABLE);
#endif
	/* Register REG_ADR_03 */
	RDA5807Registers[1] = (1 << BAND_1) ;
    125a:	88 e0       	ldi	r24, 0x08	; 8
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9d 83       	std	Y+5, r25	; 0x05
    1260:	8c 83       	std	Y+4, r24	; 0x04
	/* Register REG_ADR_04 */
#if RDS_USED
	RDA5807Registers[2] = (1 << RDS_FIFO_EN) | (1 << RDS_FIFO_CLR);
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	94 e1       	ldi	r25, 0x14	; 20
    1266:	9f 83       	std	Y+7, r25	; 0x07
    1268:	8e 83       	std	Y+6, r24	; 0x06
#else
    RDA5807Registers[2]= 0u;
#endif
	/* Register REG_ADR_05 */
	RDA5807Registers[3] = (1 << INT_MODE) | (1 << SEEK_MODE_1)  | (1 << SEEKTH_1)| (1 << SEEKTH_0) | (1 << LNA_PORT_SEL_1) | (1 << LNA_ICSEL_1) | (1 << VOLUME_0);
    126a:	81 ea       	ldi	r24, 0xA1	; 161
    126c:	93 ec       	ldi	r25, 0xC3	; 195
    126e:	99 87       	std	Y+9, r25	; 0x09
    1270:	88 87       	std	Y+8, r24	; 0x08
    /* Register REG_ADR_06 */
	RDA5807Registers[4] = (1 << OPEN_MODE_1) | (1 << OPEN_MODE_0);
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e6       	ldi	r25, 0x60	; 96
    1276:	9b 87       	std	Y+11, r25	; 0x0b
    1278:	8a 87       	std	Y+10, r24	; 0x0a
    /* Register REG_ADR_07 */
	RDA5807Registers[5] = (1 << TH_SOFRBLEND_4) | (1 << MODE_65M_50M) | (1 << SEEK_TH_OLD_2) | (1 << SOFTBLEND_EN);
    127a:	82 e1       	ldi	r24, 0x12	; 18
    127c:	92 e4       	ldi	r25, 0x42	; 66
    127e:	9d 87       	std	Y+13, r25	; 0x0d
    1280:	8c 87       	std	Y+12, r24	; 0x0c

    for(uint8_t idx = 0; idx < 6; idx++) {
    1282:	19 82       	std	Y+1, r1	; 0x01
    1284:	22 c0       	rjmp	.+68     	; 0x12ca <RDA5807mInit+0x9c>

        RDA5807Registers[idx] = swapbytes(RDA5807Registers[idx]);
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	9e 01       	movw	r18, r28
    1292:	2f 5f       	subi	r18, 0xFF	; 255
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	82 0f       	add	r24, r18
    1298:	93 1f       	adc	r25, r19
    129a:	01 96       	adiw	r24, 0x01	; 1
    129c:	fc 01       	movw	r30, r24
    129e:	20 81       	ld	r18, Z
    12a0:	31 81       	ldd	r19, Z+1	; 0x01
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	32 27       	eor	r19, r18
    12aa:	23 27       	eor	r18, r19
    12ac:	32 27       	eor	r19, r18
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	ae 01       	movw	r20, r28
    12b4:	4f 5f       	subi	r20, 0xFF	; 255
    12b6:	5f 4f       	sbci	r21, 0xFF	; 255
    12b8:	84 0f       	add	r24, r20
    12ba:	95 1f       	adc	r25, r21
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	fc 01       	movw	r30, r24
    12c0:	31 83       	std	Z+1, r19	; 0x01
    12c2:	20 83       	st	Z, r18
    for(uint8_t idx = 0; idx < 6; idx++) {
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	8f 5f       	subi	r24, 0xFF	; 255
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	86 30       	cpi	r24, 0x06	; 6
    12ce:	d8 f2       	brcs	.-74     	; 0x1286 <RDA5807mInit+0x58>
    }

    twi_writeToSlave(RDA5807M_I2C_ADR, (uint8_t*)RDA5807Registers, RDA5807M_REG_SIZE*6);
    12d0:	ce 01       	movw	r24, r28
    12d2:	02 96       	adiw	r24, 0x02	; 2
    12d4:	4c e0       	ldi	r20, 0x0C	; 12
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	bc 01       	movw	r22, r24
    12da:	80 e1       	ldi	r24, 0x10	; 16
    12dc:	0e 94 38 04 	call	0x870	; 0x870 <twi_writeToSlave>

	return RDA5807mFN_OK;
    12e0:	80 e0       	ldi	r24, 0x00	; 0

}
    12e2:	2d 96       	adiw	r28, 0x0d	; 13
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	08 95       	ret

000012f4 <RDA5807mSetFreq>:

uint8_t RDA5807mSetFreq(uint16_t freq) {
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <RDA5807mSetFreq+0x6>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <RDA5807mSetFreq+0x8>
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <RDA5807mSetFreq+0xa>
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	9e 83       	std	Y+6, r25	; 0x06
    1304:	8d 83       	std	Y+5, r24	; 0x05

    /* For frequency change 2nd register must be accessed */
    uint16_t RDA5807Registers[2] = {0};
    1306:	19 82       	std	Y+1, r1	; 0x01
    1308:	1a 82       	std	Y+2, r1	; 0x02
    130a:	1b 82       	std	Y+3, r1	; 0x03
    130c:	1c 82       	std	Y+4, r1	; 0x04

    if (RDA5807mWW_FREQ_MIN > freq ||
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	80 3b       	cpi	r24, 0xB0	; 176
    1314:	9d 41       	sbci	r25, 0x1D	; 29
    1316:	28 f0       	brcs	.+10     	; 0x1322 <RDA5807mSetFreq+0x2e>
    1318:	8d 81       	ldd	r24, Y+5	; 0x05
    131a:	9e 81       	ldd	r25, Y+6	; 0x06
    131c:	81 33       	cpi	r24, 0x31	; 49
    131e:	9a 42       	sbci	r25, 0x2A	; 42
    1320:	10 f0       	brcs	.+4      	; 0x1326 <RDA5807mSetFreq+0x32>
        RDA5807mWW_FREQ_MAX < freq)
            return RDA5807mFN_ERR;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	33 c0       	rjmp	.+102    	; 0x138c <RDA5807mSetFreq+0x98>
#if RDS_USED
    RDA5807Registers[0] = (1 << DHIZ)| (1 << DMUTE) | (1 << BASS)| (1 << RCLK_DIR_MODE) | (1 << RDS_EN) | (1 << ENABLE);
    1326:	89 e0       	ldi	r24, 0x09	; 9
    1328:	94 ed       	ldi	r25, 0xD4	; 212
    132a:	9a 83       	std	Y+2, r25	; 0x02
    132c:	89 83       	std	Y+1, r24	; 0x01
#else
    RDA5807Registers[0] = (1 << DHIZ)| (1 << DMUTE) | (1 << BASS)| (1 << RCLK_DIR_MODE)| (1 << ENABLE);
#endif
    freq -= 760;
    132e:	8d 81       	ldd	r24, Y+5	; 0x05
    1330:	9e 81       	ldd	r25, Y+6	; 0x06
    1332:	88 5f       	subi	r24, 0xF8	; 248
    1334:	92 40       	sbci	r25, 0x02	; 2
    1336:	9e 83       	std	Y+6, r25	; 0x06
    1338:	8d 83       	std	Y+5, r24	; 0x05
    freq <<= 6;
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	00 24       	eor	r0, r0
    1340:	96 95       	lsr	r25
    1342:	87 95       	ror	r24
    1344:	07 94       	ror	r0
    1346:	96 95       	lsr	r25
    1348:	87 95       	ror	r24
    134a:	07 94       	ror	r0
    134c:	98 2f       	mov	r25, r24
    134e:	80 2d       	mov	r24, r0
    1350:	9e 83       	std	Y+6, r25	; 0x06
    1352:	8d 83       	std	Y+5, r24	; 0x05
    RDA5807Registers[1] = freq | (1 << TUNE) | (1 << BAND_1);
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	9e 81       	ldd	r25, Y+6	; 0x06
    1358:	88 61       	ori	r24, 0x18	; 24
    135a:	9c 83       	std	Y+4, r25	; 0x04
    135c:	8b 83       	std	Y+3, r24	; 0x03

    RDA5807Registers[0] = swapbytes(RDA5807Registers[0]);
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	98 27       	eor	r25, r24
    1364:	89 27       	eor	r24, r25
    1366:	98 27       	eor	r25, r24
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	89 83       	std	Y+1, r24	; 0x01
    RDA5807Registers[1] = swapbytes(RDA5807Registers[1]);
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	98 27       	eor	r25, r24
    1372:	89 27       	eor	r24, r25
    1374:	98 27       	eor	r25, r24
    1376:	9c 83       	std	Y+4, r25	; 0x04
    1378:	8b 83       	std	Y+3, r24	; 0x03

    twi_writeToSlave(RDA5807M_I2C_ADR, (uint8_t*)RDA5807Registers, 4);
    137a:	44 e0       	ldi	r20, 0x04	; 4
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	ce 01       	movw	r24, r28
    1380:	01 96       	adiw	r24, 0x01	; 1
    1382:	bc 01       	movw	r22, r24
    1384:	80 e1       	ldi	r24, 0x10	; 16
    1386:	0e 94 38 04 	call	0x870	; 0x870 <twi_writeToSlave>

    return RDA5807mFN_OK;
    138a:	80 e0       	ldi	r24, 0x00	; 0
}
    138c:	26 96       	adiw	r28, 0x06	; 6
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	08 95       	ret

0000139e <RDA5807mSetVolm>:

uint8_t RDA5807mSetVolm(uint8_t volume) {
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	2a 97       	sbiw	r28, 0x0a	; 10
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	8a 87       	std	Y+10, r24	; 0x0a

    if (volume > RDA5807mVOLUME_MAX) return RDA5807mFN_ERR;
    13b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13b6:	80 31       	cpi	r24, 0x10	; 16
    13b8:	10 f0       	brcs	.+4      	; 0x13be <RDA5807mSetVolm+0x20>
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	41 c0       	rjmp	.+130    	; 0x1440 <RDA5807mSetVolm+0xa2>
    /* To set volume, 4th register must be accessed,
       so 4x16b write transaction is needed */
    uint16_t RDA5807Registers[4];
	/* Register REG_ADR_02 */
#if RDS_USED
    RDA5807Registers[0] = (1 << DHIZ)| (1 << DMUTE) | (1 << BASS)| (1 << RCLK_DIR_MODE) | (1 << RDS_EN) | (1 << ENABLE);
    13be:	89 e0       	ldi	r24, 0x09	; 9
    13c0:	94 ed       	ldi	r25, 0xD4	; 212
    13c2:	9b 83       	std	Y+3, r25	; 0x03
    13c4:	8a 83       	std	Y+2, r24	; 0x02
#else
    RDA5807Registers[0] = (1 << DHIZ)| (1 << DMUTE) | (1 << BASS)| (1 << RCLK_DIR_MODE)| (1 << ENABLE);
#endif	/* Register REG_ADR_03 */
	RDA5807Registers[1] = 0 ;
    13c6:	1d 82       	std	Y+5, r1	; 0x05
    13c8:	1c 82       	std	Y+4, r1	; 0x04
	/* Register REG_ADR_04 */

#if RDS_USED
	RDA5807Registers[2] = (1 << RDS_FIFO_EN) | (1 << RDS_FIFO_CLR);
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	94 e1       	ldi	r25, 0x14	; 20
    13ce:	9f 83       	std	Y+7, r25	; 0x07
    13d0:	8e 83       	std	Y+6, r24	; 0x06
#else
    RDA5807Registers[2] = 0u;
#endif
	/* Register REG_ADR_05 */
	RDA5807Registers[3] = (1 << INT_MODE) | (1 << SEEK_MODE_1)  | (1 << SEEKTH_1)| (1 << SEEKTH_0) | (1 << LNA_PORT_SEL_1) | (1 << LNA_ICSEL_1) | volume;
    13d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    13d4:	88 2f       	mov	r24, r24
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	80 6a       	ori	r24, 0xA0	; 160
    13da:	93 6c       	ori	r25, 0xC3	; 195
    13dc:	99 87       	std	Y+9, r25	; 0x09
    13de:	88 87       	std	Y+8, r24	; 0x08

    for(uint8_t idx = 0; idx < 4; idx++) RDA5807Registers[idx] = swapbytes(RDA5807Registers[idx]);
    13e0:	19 82       	std	Y+1, r1	; 0x01
    13e2:	22 c0       	rjmp	.+68     	; 0x1428 <RDA5807mSetVolm+0x8a>
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	9e 01       	movw	r18, r28
    13f0:	2f 5f       	subi	r18, 0xFF	; 255
    13f2:	3f 4f       	sbci	r19, 0xFF	; 255
    13f4:	82 0f       	add	r24, r18
    13f6:	93 1f       	adc	r25, r19
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	fc 01       	movw	r30, r24
    13fc:	20 81       	ld	r18, Z
    13fe:	31 81       	ldd	r19, Z+1	; 0x01
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	32 27       	eor	r19, r18
    1408:	23 27       	eor	r18, r19
    140a:	32 27       	eor	r19, r18
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	ae 01       	movw	r20, r28
    1412:	4f 5f       	subi	r20, 0xFF	; 255
    1414:	5f 4f       	sbci	r21, 0xFF	; 255
    1416:	84 0f       	add	r24, r20
    1418:	95 1f       	adc	r25, r21
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	fc 01       	movw	r30, r24
    141e:	31 83       	std	Z+1, r19	; 0x01
    1420:	20 83       	st	Z, r18
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	8f 5f       	subi	r24, 0xFF	; 255
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	84 30       	cpi	r24, 0x04	; 4
    142c:	d8 f2       	brcs	.-74     	; 0x13e4 <RDA5807mSetVolm+0x46>

    twi_writeToSlave(RDA5807M_I2C_ADR, (uint8_t*)RDA5807Registers, 8);
    142e:	ce 01       	movw	r24, r28
    1430:	02 96       	adiw	r24, 0x02	; 2
    1432:	48 e0       	ldi	r20, 0x08	; 8
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	bc 01       	movw	r22, r24
    1438:	80 e1       	ldi	r24, 0x10	; 16
    143a:	0e 94 38 04 	call	0x870	; 0x870 <twi_writeToSlave>

    return RDA5807mFN_OK;
    143e:	80 e0       	ldi	r24, 0x00	; 0
}
    1440:	2a 96       	adiw	r28, 0x0a	; 10
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <RDA5807mGetRSSI>:

uint8_t RDA5807mGetRSSI(void) {
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	00 d0       	rcall	.+0      	; 0x1458 <RDA5807mGetRSSI+0x6>
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62

    uint16_t RDA5807MReg;

    RDA5807MReg = RDA5807mGetReg0x0B();
    145c:	0e 94 9a 08 	call	0x1134	; 0x1134 <RDA5807mGetReg0x0B>
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	89 83       	std	Y+1, r24	; 0x01

    /* Masking only RSSI bits 15:9 */
    RDA5807MReg &= ((1 << RSSI_6) | (1 << RSSI_5) | (1 << RSSI_4) | (1 << RSSI_3) | (1 << RSSI_2) | (1 << RSSI_1) | (1 << RSSI_0));
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	9a 81       	ldd	r25, Y+2	; 0x02
    1468:	88 27       	eor	r24, r24
    146a:	9e 7f       	andi	r25, 0xFE	; 254
    146c:	9a 83       	std	Y+2, r25	; 0x02
    146e:	89 83       	std	Y+1, r24	; 0x01

    /* Shifting value to be within 6:0 */
    RDA5807MReg >>= RSSI_0;
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	89 2f       	mov	r24, r25
    1476:	99 27       	eor	r25, r25
    1478:	86 95       	lsr	r24
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01

    return (uint8_t)RDA5807MReg;
    147e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	08 95       	ret

0000148a <RDA5807mGetRDSR>:

uint8_t RDA5807mGetRDSR(void) {
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	00 d0       	rcall	.+0      	; 0x1490 <RDA5807mGetRDSR+0x6>
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62

    uint16_t RDA5807MReg = RDA5807mGetReg0x0A();
    1494:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <RDA5807mGetReg0x0A>
    1498:	9a 83       	std	Y+2, r25	; 0x02
    149a:	89 83       	std	Y+1, r24	; 0x01

    return ((RDA5807MReg & (1 << RDSR)) >> (RDSR));
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	9a 81       	ldd	r25, Y+2	; 0x02
    14a0:	88 27       	eor	r24, r24
    14a2:	99 0f       	add	r25, r25
    14a4:	88 1f       	adc	r24, r24
    14a6:	99 27       	eor	r25, r25
}
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	08 95       	ret

000014b2 <RDA5807mGetRDSS>:

uint8_t RDA5807mGetRDSS(void) {
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <RDA5807mGetRDSS+0x6>
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62

    uint16_t RDA5807MReg = RDA5807mGetReg0x0A();
    14bc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <RDA5807mGetReg0x0A>
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01

    return ((RDA5807MReg & (1 << RDSS)) >> (RDSS));
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	89 2f       	mov	r24, r25
    14ca:	99 27       	eor	r25, r25
    14cc:	82 95       	swap	r24
    14ce:	8f 70       	andi	r24, 0x0F	; 15
    14d0:	81 70       	andi	r24, 0x01	; 1
}
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	08 95       	ret

000014dc <RDA5807misChannelStereo>:

uint8_t RDA5807misChannelStereo(void) {
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <RDA5807misChannelStereo+0x6>
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62

    uint16_t RDA5807MReg = RDA5807mGetReg0x0A();
    14e6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <RDA5807mGetReg0x0A>
    14ea:	9a 83       	std	Y+2, r25	; 0x02
    14ec:	89 83       	std	Y+1, r24	; 0x01

    return ((RDA5807MReg & (1 << ST)) >> (ST));
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	89 2f       	mov	r24, r25
    14f4:	99 27       	eor	r25, r25
    14f6:	86 95       	lsr	r24
    14f8:	86 95       	lsr	r24
    14fa:	81 70       	andi	r24, 0x01	; 1
}
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	08 95       	ret

00001506 <RDA5807mIsChannelStation>:

uint8_t RDA5807mIsChannelStation(void) {
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	00 d0       	rcall	.+0      	; 0x150c <RDA5807mIsChannelStation+0x6>
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62

    uint16_t RDA5807MReg = RDA5807mGetReg0x0B();
    1510:	0e 94 9a 08 	call	0x1134	; 0x1134 <RDA5807mGetReg0x0B>
    1514:	9a 83       	std	Y+2, r25	; 0x02
    1516:	89 83       	std	Y+1, r24	; 0x01

    return ((RDA5807MReg & (1 << ST)) >> (ST));
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
    151c:	89 2f       	mov	r24, r25
    151e:	99 27       	eor	r25, r25
    1520:	86 95       	lsr	r24
    1522:	86 95       	lsr	r24
    1524:	81 70       	andi	r24, 0x01	; 1
}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	08 95       	ret

00001530 <RDA5807mGetRDSBlockA>:

uint16_t RDA5807mGetRDSBlockA(void) {
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	28 97       	sbiw	r28, 0x08	; 8
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61

    uint8_t Registers[6] = {0};
    1544:	1c 82       	std	Y+4, r1	; 0x04
    1546:	1b 82       	std	Y+3, r1	; 0x03
    1548:	24 e0       	ldi	r18, 0x04	; 4
    154a:	ce 01       	movw	r24, r28
    154c:	05 96       	adiw	r24, 0x05	; 5
    154e:	fc 01       	movw	r30, r24
    1550:	32 2f       	mov	r19, r18
    1552:	11 92       	st	Z+, r1
    1554:	3a 95       	dec	r19
    1556:	e9 f7       	brne	.-6      	; 0x1552 <RDA5807mGetRDSBlockA+0x22>
    uint16_t RDA5807MReg;

    twi_readFromSlave(RDA5807M_I2C_ADR, Registers, 6);
    1558:	ce 01       	movw	r24, r28
    155a:	03 96       	adiw	r24, 0x03	; 3
    155c:	46 e0       	ldi	r20, 0x06	; 6
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	bc 01       	movw	r22, r24
    1562:	80 e1       	ldi	r24, 0x10	; 16
    1564:	0e 94 6f 04 	call	0x8de	; 0x8de <twi_readFromSlave>
    RDA5807MReg = ((Registers[4] << 8 )| Registers[5]);
    1568:	8f 81       	ldd	r24, Y+7	; 0x07
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	38 2f       	mov	r19, r24
    1570:	22 27       	eor	r18, r18
    1572:	88 85       	ldd	r24, Y+8	; 0x08
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	82 2b       	or	r24, r18
    157a:	93 2b       	or	r25, r19
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01

    return RDA5807MReg;
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1584:	28 96       	adiw	r28, 0x08	; 8
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	08 95       	ret

00001596 <RDA5807mGetRDSBlockB>:

uint16_t RDA5807mGetRDSBlockB(void) {
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	2a 97       	sbiw	r28, 0x0a	; 10
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61

    uint8_t Registers[8] = {0};
    15aa:	1c 82       	std	Y+4, r1	; 0x04
    15ac:	1b 82       	std	Y+3, r1	; 0x03
    15ae:	26 e0       	ldi	r18, 0x06	; 6
    15b0:	ce 01       	movw	r24, r28
    15b2:	05 96       	adiw	r24, 0x05	; 5
    15b4:	fc 01       	movw	r30, r24
    15b6:	32 2f       	mov	r19, r18
    15b8:	11 92       	st	Z+, r1
    15ba:	3a 95       	dec	r19
    15bc:	e9 f7       	brne	.-6      	; 0x15b8 <RDA5807mGetRDSBlockB+0x22>
    uint16_t RDA5807MReg;

    twi_readFromSlave(RDA5807M_I2C_ADR, Registers, 8);
    15be:	ce 01       	movw	r24, r28
    15c0:	03 96       	adiw	r24, 0x03	; 3
    15c2:	48 e0       	ldi	r20, 0x08	; 8
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	bc 01       	movw	r22, r24
    15c8:	80 e1       	ldi	r24, 0x10	; 16
    15ca:	0e 94 6f 04 	call	0x8de	; 0x8de <twi_readFromSlave>
    RDA5807MReg = ((Registers[6] << 8 )| Registers[7]);
    15ce:	89 85       	ldd	r24, Y+9	; 0x09
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	38 2f       	mov	r19, r24
    15d6:	22 27       	eor	r18, r18
    15d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    15da:	88 2f       	mov	r24, r24
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	82 2b       	or	r24, r18
    15e0:	93 2b       	or	r25, r19
    15e2:	9a 83       	std	Y+2, r25	; 0x02
    15e4:	89 83       	std	Y+1, r24	; 0x01

    return RDA5807MReg;
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    15ea:	2a 96       	adiw	r28, 0x0a	; 10
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	08 95       	ret

000015fc <RDA5807mGetRDSBlockC>:

uint16_t RDA5807mGetRDSBlockC(void) {
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	2c 97       	sbiw	r28, 0x0c	; 12
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61

    uint8_t Registers[10] = {0};
    1610:	1c 82       	std	Y+4, r1	; 0x04
    1612:	1b 82       	std	Y+3, r1	; 0x03
    1614:	28 e0       	ldi	r18, 0x08	; 8
    1616:	ce 01       	movw	r24, r28
    1618:	05 96       	adiw	r24, 0x05	; 5
    161a:	fc 01       	movw	r30, r24
    161c:	32 2f       	mov	r19, r18
    161e:	11 92       	st	Z+, r1
    1620:	3a 95       	dec	r19
    1622:	e9 f7       	brne	.-6      	; 0x161e <RDA5807mGetRDSBlockC+0x22>
    uint16_t RDA5807MReg;

    twi_readFromSlave(RDA5807M_I2C_ADR, Registers, 10);
    1624:	ce 01       	movw	r24, r28
    1626:	03 96       	adiw	r24, 0x03	; 3
    1628:	4a e0       	ldi	r20, 0x0A	; 10
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	bc 01       	movw	r22, r24
    162e:	80 e1       	ldi	r24, 0x10	; 16
    1630:	0e 94 6f 04 	call	0x8de	; 0x8de <twi_readFromSlave>
    RDA5807MReg = ((Registers[8] << 8 )| Registers[9]);
    1634:	8b 85       	ldd	r24, Y+11	; 0x0b
    1636:	88 2f       	mov	r24, r24
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	38 2f       	mov	r19, r24
    163c:	22 27       	eor	r18, r18
    163e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	82 2b       	or	r24, r18
    1646:	93 2b       	or	r25, r19
    1648:	9a 83       	std	Y+2, r25	; 0x02
    164a:	89 83       	std	Y+1, r24	; 0x01

    return RDA5807MReg;
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1650:	2c 96       	adiw	r28, 0x0c	; 12
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	08 95       	ret

00001662 <RDA5807mGetRDSBlockD>:

uint16_t RDA5807mGetRDSBlockD(void) {
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	2e 97       	sbiw	r28, 0x0e	; 14
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61

    uint8_t Registers[12] = {0};
    1676:	1c 82       	std	Y+4, r1	; 0x04
    1678:	1b 82       	std	Y+3, r1	; 0x03
    167a:	2a e0       	ldi	r18, 0x0A	; 10
    167c:	ce 01       	movw	r24, r28
    167e:	05 96       	adiw	r24, 0x05	; 5
    1680:	fc 01       	movw	r30, r24
    1682:	32 2f       	mov	r19, r18
    1684:	11 92       	st	Z+, r1
    1686:	3a 95       	dec	r19
    1688:	e9 f7       	brne	.-6      	; 0x1684 <RDA5807mGetRDSBlockD+0x22>
    uint16_t RDA5807MReg;

    twi_readFromSlave(RDA5807M_I2C_ADR, Registers, 12);
    168a:	ce 01       	movw	r24, r28
    168c:	03 96       	adiw	r24, 0x03	; 3
    168e:	4c e0       	ldi	r20, 0x0C	; 12
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	bc 01       	movw	r22, r24
    1694:	80 e1       	ldi	r24, 0x10	; 16
    1696:	0e 94 6f 04 	call	0x8de	; 0x8de <twi_readFromSlave>
    RDA5807MReg = ((Registers[10] << 8 )| Registers[11]);
    169a:	8d 85       	ldd	r24, Y+13	; 0x0d
    169c:	88 2f       	mov	r24, r24
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	38 2f       	mov	r19, r24
    16a2:	22 27       	eor	r18, r18
    16a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	82 2b       	or	r24, r18
    16ac:	93 2b       	or	r25, r19
    16ae:	9a 83       	std	Y+2, r25	; 0x02
    16b0:	89 83       	std	Y+1, r24	; 0x01

    return RDA5807MReg;
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    16b6:	2e 96       	adiw	r28, 0x0e	; 14
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	08 95       	ret

000016c8 <RDA5807mGetErrBlockA>:

uint8_t RDA5807mGetErrBlockA(void) {
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <RDA5807mGetErrBlockA+0x6>
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62

    uint16_t RDA5807MReg;

	RDA5807MReg = RDA5807mGetReg0x0B();
    16d2:	0e 94 9a 08 	call	0x1134	; 0x1134 <RDA5807mGetReg0x0B>
    16d6:	9a 83       	std	Y+2, r25	; 0x02
    16d8:	89 83       	std	Y+1, r24	; 0x01

    RDA5807MReg &= (1 << BLERA_1) | (1 << BLERA_0);
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	9a 81       	ldd	r25, Y+2	; 0x02
    16de:	8c 70       	andi	r24, 0x0C	; 12
    16e0:	99 27       	eor	r25, r25
    16e2:	9a 83       	std	Y+2, r25	; 0x02
    16e4:	89 83       	std	Y+1, r24	; 0x01
    RDA5807MReg >>= BLERA_0;
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	96 95       	lsr	r25
    16ec:	87 95       	ror	r24
    16ee:	96 95       	lsr	r25
    16f0:	87 95       	ror	r24
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	89 83       	std	Y+1, r24	; 0x01

    return (uint8_t)RDA5807MReg;
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	08 95       	ret

00001702 <RDA5807mGetErrBlockB>:

uint8_t RDA5807mGetErrBlockB(void) {
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	00 d0       	rcall	.+0      	; 0x1708 <RDA5807mGetErrBlockB+0x6>
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62

    uint16_t RDA5807MReg;

	RDA5807MReg = RDA5807mGetReg0x0B();
    170c:	0e 94 9a 08 	call	0x1134	; 0x1134 <RDA5807mGetReg0x0B>
    1710:	9a 83       	std	Y+2, r25	; 0x02
    1712:	89 83       	std	Y+1, r24	; 0x01

    RDA5807MReg &= (1 << BLERB_1) | (1 << BLERB_0);
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	9a 81       	ldd	r25, Y+2	; 0x02
    1718:	83 70       	andi	r24, 0x03	; 3
    171a:	99 27       	eor	r25, r25
    171c:	9a 83       	std	Y+2, r25	; 0x02
    171e:	89 83       	std	Y+1, r24	; 0x01
    RDA5807MReg >>= BLERB_0;

    return (uint8_t)RDA5807MReg;
    1720:	89 81       	ldd	r24, Y+1	; 0x01
}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	08 95       	ret

0000172c <RDA5807mClearRDSFIFO>:


uint8_t RDA5807mClearRDSFIFO(void) {
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	00 d0       	rcall	.+0      	; 0x1732 <RDA5807mClearRDSFIFO+0x6>
    1732:	00 d0       	rcall	.+0      	; 0x1734 <RDA5807mClearRDSFIFO+0x8>
    1734:	00 d0       	rcall	.+0      	; 0x1736 <RDA5807mClearRDSFIFO+0xa>
    1736:	0f 92       	push	r0
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62

    uint16_t RDA5807Registers[3] = {0};
    173c:	26 e0       	ldi	r18, 0x06	; 6
    173e:	ce 01       	movw	r24, r28
    1740:	02 96       	adiw	r24, 0x02	; 2
    1742:	fc 01       	movw	r30, r24
    1744:	32 2f       	mov	r19, r18
    1746:	11 92       	st	Z+, r1
    1748:	3a 95       	dec	r19
    174a:	e9 f7       	brne	.-6      	; 0x1746 <RDA5807mClearRDSFIFO+0x1a>
	/* Register REG_ADR_02 */
#if RDS_USED
    RDA5807Registers[0] = (1 << DHIZ)| (1 << DMUTE) | (1 << BASS)| (1 << RCLK_DIR_MODE) | (1 << RDS_EN) | (1 << ENABLE);
    174c:	89 e0       	ldi	r24, 0x09	; 9
    174e:	94 ed       	ldi	r25, 0xD4	; 212
    1750:	9b 83       	std	Y+3, r25	; 0x03
    1752:	8a 83       	std	Y+2, r24	; 0x02
#else
    RDA5807Registers[0] = (1 << DHIZ)| (1 << DMUTE) | (1 << BASS)| (1 << RCLK_DIR_MODE)| (1 << ENABLE);
#endif	/* Register REG_ADR_03 */
	RDA5807Registers[1] = 0 ;
    1754:	1d 82       	std	Y+5, r1	; 0x05
    1756:	1c 82       	std	Y+4, r1	; 0x04
	/* Register REG_ADR_04 */

#if RDS_USED
	RDA5807Registers[2] = (1 << RDS_FIFO_EN) | (1 << RDS_FIFO_CLR);
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	94 e1       	ldi	r25, 0x14	; 20
    175c:	9f 83       	std	Y+7, r25	; 0x07
    175e:	8e 83       	std	Y+6, r24	; 0x06
#endif
    for(uint8_t idx = 0; idx < 3; idx++) RDA5807Registers[idx] = swapbytes(RDA5807Registers[idx]);
    1760:	19 82       	std	Y+1, r1	; 0x01
    1762:	22 c0       	rjmp	.+68     	; 0x17a8 <RDA5807mClearRDSFIFO+0x7c>
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	88 2f       	mov	r24, r24
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	9e 01       	movw	r18, r28
    1770:	2f 5f       	subi	r18, 0xFF	; 255
    1772:	3f 4f       	sbci	r19, 0xFF	; 255
    1774:	82 0f       	add	r24, r18
    1776:	93 1f       	adc	r25, r19
    1778:	01 96       	adiw	r24, 0x01	; 1
    177a:	fc 01       	movw	r30, r24
    177c:	20 81       	ld	r18, Z
    177e:	31 81       	ldd	r19, Z+1	; 0x01
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	32 27       	eor	r19, r18
    1788:	23 27       	eor	r18, r19
    178a:	32 27       	eor	r19, r18
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	ae 01       	movw	r20, r28
    1792:	4f 5f       	subi	r20, 0xFF	; 255
    1794:	5f 4f       	sbci	r21, 0xFF	; 255
    1796:	84 0f       	add	r24, r20
    1798:	95 1f       	adc	r25, r21
    179a:	01 96       	adiw	r24, 0x01	; 1
    179c:	fc 01       	movw	r30, r24
    179e:	31 83       	std	Z+1, r19	; 0x01
    17a0:	20 83       	st	Z, r18
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	8f 5f       	subi	r24, 0xFF	; 255
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	83 30       	cpi	r24, 0x03	; 3
    17ac:	d8 f2       	brcs	.-74     	; 0x1764 <RDA5807mClearRDSFIFO+0x38>

    twi_writeToSlave(RDA5807M_I2C_ADR, (uint8_t*)RDA5807Registers, 6);
    17ae:	ce 01       	movw	r24, r28
    17b0:	02 96       	adiw	r24, 0x02	; 2
    17b2:	46 e0       	ldi	r20, 0x06	; 6
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	bc 01       	movw	r22, r24
    17b8:	80 e1       	ldi	r24, 0x10	; 16
    17ba:	0e 94 38 04 	call	0x870	; 0x870 <twi_writeToSlave>

    return RDA5807mFN_OK;
    17be:	80 e0       	ldi	r24, 0x00	; 0

}
    17c0:	27 96       	adiw	r28, 0x07	; 7
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	de bf       	out	0x3e, r29	; 62
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	cd bf       	out	0x3d, r28	; 61
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	08 95       	ret

000017d2 <__udivmodsi4>:
    17d2:	a1 e2       	ldi	r26, 0x21	; 33
    17d4:	1a 2e       	mov	r1, r26
    17d6:	aa 1b       	sub	r26, r26
    17d8:	bb 1b       	sub	r27, r27
    17da:	fd 01       	movw	r30, r26
    17dc:	0d c0       	rjmp	.+26     	; 0x17f8 <__udivmodsi4_ep>

000017de <__udivmodsi4_loop>:
    17de:	aa 1f       	adc	r26, r26
    17e0:	bb 1f       	adc	r27, r27
    17e2:	ee 1f       	adc	r30, r30
    17e4:	ff 1f       	adc	r31, r31
    17e6:	a2 17       	cp	r26, r18
    17e8:	b3 07       	cpc	r27, r19
    17ea:	e4 07       	cpc	r30, r20
    17ec:	f5 07       	cpc	r31, r21
    17ee:	20 f0       	brcs	.+8      	; 0x17f8 <__udivmodsi4_ep>
    17f0:	a2 1b       	sub	r26, r18
    17f2:	b3 0b       	sbc	r27, r19
    17f4:	e4 0b       	sbc	r30, r20
    17f6:	f5 0b       	sbc	r31, r21

000017f8 <__udivmodsi4_ep>:
    17f8:	66 1f       	adc	r22, r22
    17fa:	77 1f       	adc	r23, r23
    17fc:	88 1f       	adc	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	1a 94       	dec	r1
    1802:	69 f7       	brne	.-38     	; 0x17de <__udivmodsi4_loop>
    1804:	60 95       	com	r22
    1806:	70 95       	com	r23
    1808:	80 95       	com	r24
    180a:	90 95       	com	r25
    180c:	9b 01       	movw	r18, r22
    180e:	ac 01       	movw	r20, r24
    1810:	bd 01       	movw	r22, r26
    1812:	cf 01       	movw	r24, r30
    1814:	08 95       	ret

00001816 <memcmp>:
    1816:	fb 01       	movw	r30, r22
    1818:	dc 01       	movw	r26, r24
    181a:	04 c0       	rjmp	.+8      	; 0x1824 <memcmp+0xe>
    181c:	8d 91       	ld	r24, X+
    181e:	01 90       	ld	r0, Z+
    1820:	80 19       	sub	r24, r0
    1822:	21 f4       	brne	.+8      	; 0x182c <memcmp+0x16>
    1824:	41 50       	subi	r20, 0x01	; 1
    1826:	50 40       	sbci	r21, 0x00	; 0
    1828:	c8 f7       	brcc	.-14     	; 0x181c <memcmp+0x6>
    182a:	88 1b       	sub	r24, r24
    182c:	99 0b       	sbc	r25, r25
    182e:	08 95       	ret

00001830 <memcpy>:
    1830:	fb 01       	movw	r30, r22
    1832:	dc 01       	movw	r26, r24
    1834:	02 c0       	rjmp	.+4      	; 0x183a <memcpy+0xa>
    1836:	01 90       	ld	r0, Z+
    1838:	0d 92       	st	X+, r0
    183a:	41 50       	subi	r20, 0x01	; 1
    183c:	50 40       	sbci	r21, 0x00	; 0
    183e:	d8 f7       	brcc	.-10     	; 0x1836 <memcpy+0x6>
    1840:	08 95       	ret

00001842 <memset>:
    1842:	dc 01       	movw	r26, r24
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <memset+0x6>
    1846:	6d 93       	st	X+, r22
    1848:	41 50       	subi	r20, 0x01	; 1
    184a:	50 40       	sbci	r21, 0x00	; 0
    184c:	e0 f7       	brcc	.-8      	; 0x1846 <memset+0x4>
    184e:	08 95       	ret

00001850 <printf>:
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	a0 e0       	ldi	r26, 0x00	; 0
    1854:	ee e2       	ldi	r30, 0x2E	; 46
    1856:	fc e0       	ldi	r31, 0x0C	; 12
    1858:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__prologue_saves__+0x20>
    185c:	fe 01       	movw	r30, r28
    185e:	35 96       	adiw	r30, 0x05	; 5
    1860:	61 91       	ld	r22, Z+
    1862:	71 91       	ld	r23, Z+
    1864:	af 01       	movw	r20, r30
    1866:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <__iob+0x2>
    186a:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <__iob+0x3>
    186e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <vfprintf>
    1872:	e2 e0       	ldi	r30, 0x02	; 2
    1874:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__epilogue_restores__+0x20>

00001878 <puts>:
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <__iob+0x2>
    1884:	f0 91 f6 01 	lds	r31, 0x01F6	; 0x8001f6 <__iob+0x3>
    1888:	23 81       	ldd	r18, Z+3	; 0x03
    188a:	00 e0       	ldi	r16, 0x00	; 0
    188c:	10 e0       	ldi	r17, 0x00	; 0
    188e:	21 fd       	sbrc	r18, 1
    1890:	0e c0       	rjmp	.+28     	; 0x18ae <puts+0x36>
    1892:	0f ef       	ldi	r16, 0xFF	; 255
    1894:	1f ef       	ldi	r17, 0xFF	; 255
    1896:	c8 01       	movw	r24, r16
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	08 95       	ret
    18a2:	09 95       	icall
    18a4:	89 2b       	or	r24, r25
    18a6:	11 f0       	breq	.+4      	; 0x18ac <puts+0x34>
    18a8:	0f ef       	ldi	r16, 0xFF	; 255
    18aa:	1f ef       	ldi	r17, 0xFF	; 255
    18ac:	ce 01       	movw	r24, r28
    18ae:	ec 01       	movw	r28, r24
    18b0:	89 91       	ld	r24, Y+
    18b2:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <__iob+0x2>
    18b6:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <__iob+0x3>
    18ba:	db 01       	movw	r26, r22
    18bc:	18 96       	adiw	r26, 0x08	; 8
    18be:	ed 91       	ld	r30, X+
    18c0:	fc 91       	ld	r31, X
    18c2:	81 11       	cpse	r24, r1
    18c4:	ee cf       	rjmp	.-36     	; 0x18a2 <puts+0x2a>
    18c6:	8a e0       	ldi	r24, 0x0A	; 10
    18c8:	09 95       	icall
    18ca:	89 2b       	or	r24, r25
    18cc:	21 f3       	breq	.-56     	; 0x1896 <puts+0x1e>
    18ce:	e1 cf       	rjmp	.-62     	; 0x1892 <puts+0x1a>

000018d0 <vfprintf>:
    18d0:	af e0       	ldi	r26, 0x0F	; 15
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	ee e6       	ldi	r30, 0x6E	; 110
    18d6:	fc e0       	ldi	r31, 0x0C	; 12
    18d8:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <__prologue_saves__>
    18dc:	7c 01       	movw	r14, r24
    18de:	3b 01       	movw	r6, r22
    18e0:	8a 01       	movw	r16, r20
    18e2:	dc 01       	movw	r26, r24
    18e4:	17 96       	adiw	r26, 0x07	; 7
    18e6:	1c 92       	st	X, r1
    18e8:	1e 92       	st	-X, r1
    18ea:	16 97       	sbiw	r26, 0x06	; 6
    18ec:	13 96       	adiw	r26, 0x03	; 3
    18ee:	8c 91       	ld	r24, X
    18f0:	81 ff       	sbrs	r24, 1
    18f2:	be c1       	rjmp	.+892    	; 0x1c70 <vfprintf+0x3a0>
    18f4:	9a e0       	ldi	r25, 0x0A	; 10
    18f6:	29 2e       	mov	r2, r25
    18f8:	fe 01       	movw	r30, r28
    18fa:	31 96       	adiw	r30, 0x01	; 1
    18fc:	4f 01       	movw	r8, r30
    18fe:	d7 01       	movw	r26, r14
    1900:	13 96       	adiw	r26, 0x03	; 3
    1902:	9c 91       	ld	r25, X
    1904:	f3 01       	movw	r30, r6
    1906:	93 fd       	sbrc	r25, 3
    1908:	85 91       	lpm	r24, Z+
    190a:	93 ff       	sbrs	r25, 3
    190c:	81 91       	ld	r24, Z+
    190e:	3f 01       	movw	r6, r30
    1910:	88 23       	and	r24, r24
    1912:	09 f4       	brne	.+2      	; 0x1916 <vfprintf+0x46>
    1914:	44 c1       	rjmp	.+648    	; 0x1b9e <vfprintf+0x2ce>
    1916:	85 32       	cpi	r24, 0x25	; 37
    1918:	39 f4       	brne	.+14     	; 0x1928 <vfprintf+0x58>
    191a:	93 fd       	sbrc	r25, 3
    191c:	85 91       	lpm	r24, Z+
    191e:	93 ff       	sbrs	r25, 3
    1920:	81 91       	ld	r24, Z+
    1922:	3f 01       	movw	r6, r30
    1924:	85 32       	cpi	r24, 0x25	; 37
    1926:	29 f4       	brne	.+10     	; 0x1932 <vfprintf+0x62>
    1928:	b7 01       	movw	r22, r14
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <fputc>
    1930:	e6 cf       	rjmp	.-52     	; 0x18fe <vfprintf+0x2e>
    1932:	b1 2c       	mov	r11, r1
    1934:	41 2c       	mov	r4, r1
    1936:	51 2c       	mov	r5, r1
    1938:	bf e1       	ldi	r27, 0x1F	; 31
    193a:	b5 15       	cp	r27, r5
    193c:	38 f0       	brcs	.+14     	; 0x194c <vfprintf+0x7c>
    193e:	8b 32       	cpi	r24, 0x2B	; 43
    1940:	09 f1       	breq	.+66     	; 0x1984 <vfprintf+0xb4>
    1942:	88 f4       	brcc	.+34     	; 0x1966 <vfprintf+0x96>
    1944:	80 32       	cpi	r24, 0x20	; 32
    1946:	01 f1       	breq	.+64     	; 0x1988 <vfprintf+0xb8>
    1948:	83 32       	cpi	r24, 0x23	; 35
    194a:	21 f1       	breq	.+72     	; 0x1994 <vfprintf+0xc4>
    194c:	57 fc       	sbrc	r5, 7
    194e:	3a c0       	rjmp	.+116    	; 0x19c4 <vfprintf+0xf4>
    1950:	20 ed       	ldi	r18, 0xD0	; 208
    1952:	28 0f       	add	r18, r24
    1954:	2a 30       	cpi	r18, 0x0A	; 10
    1956:	40 f5       	brcc	.+80     	; 0x19a8 <vfprintf+0xd8>
    1958:	56 fe       	sbrs	r5, 6
    195a:	1f c0       	rjmp	.+62     	; 0x199a <vfprintf+0xca>
    195c:	b2 9c       	mul	r11, r2
    195e:	20 0d       	add	r18, r0
    1960:	11 24       	eor	r1, r1
    1962:	b2 2e       	mov	r11, r18
    1964:	06 c0       	rjmp	.+12     	; 0x1972 <vfprintf+0xa2>
    1966:	8d 32       	cpi	r24, 0x2D	; 45
    1968:	91 f0       	breq	.+36     	; 0x198e <vfprintf+0xbe>
    196a:	80 33       	cpi	r24, 0x30	; 48
    196c:	79 f7       	brne	.-34     	; 0x194c <vfprintf+0x7c>
    196e:	68 94       	set
    1970:	50 f8       	bld	r5, 0
    1972:	f3 01       	movw	r30, r6
    1974:	93 fd       	sbrc	r25, 3
    1976:	85 91       	lpm	r24, Z+
    1978:	93 ff       	sbrs	r25, 3
    197a:	81 91       	ld	r24, Z+
    197c:	3f 01       	movw	r6, r30
    197e:	81 11       	cpse	r24, r1
    1980:	db cf       	rjmp	.-74     	; 0x1938 <vfprintf+0x68>
    1982:	20 c0       	rjmp	.+64     	; 0x19c4 <vfprintf+0xf4>
    1984:	68 94       	set
    1986:	51 f8       	bld	r5, 1
    1988:	68 94       	set
    198a:	52 f8       	bld	r5, 2
    198c:	f2 cf       	rjmp	.-28     	; 0x1972 <vfprintf+0xa2>
    198e:	68 94       	set
    1990:	53 f8       	bld	r5, 3
    1992:	ef cf       	rjmp	.-34     	; 0x1972 <vfprintf+0xa2>
    1994:	68 94       	set
    1996:	54 f8       	bld	r5, 4
    1998:	ec cf       	rjmp	.-40     	; 0x1972 <vfprintf+0xa2>
    199a:	42 9c       	mul	r4, r2
    199c:	20 0d       	add	r18, r0
    199e:	11 24       	eor	r1, r1
    19a0:	42 2e       	mov	r4, r18
    19a2:	68 94       	set
    19a4:	55 f8       	bld	r5, 5
    19a6:	e5 cf       	rjmp	.-54     	; 0x1972 <vfprintf+0xa2>
    19a8:	8e 32       	cpi	r24, 0x2E	; 46
    19aa:	29 f4       	brne	.+10     	; 0x19b6 <vfprintf+0xe6>
    19ac:	56 fc       	sbrc	r5, 6
    19ae:	f7 c0       	rjmp	.+494    	; 0x1b9e <vfprintf+0x2ce>
    19b0:	68 94       	set
    19b2:	56 f8       	bld	r5, 6
    19b4:	de cf       	rjmp	.-68     	; 0x1972 <vfprintf+0xa2>
    19b6:	8c 36       	cpi	r24, 0x6C	; 108
    19b8:	19 f4       	brne	.+6      	; 0x19c0 <vfprintf+0xf0>
    19ba:	68 94       	set
    19bc:	57 f8       	bld	r5, 7
    19be:	d9 cf       	rjmp	.-78     	; 0x1972 <vfprintf+0xa2>
    19c0:	88 36       	cpi	r24, 0x68	; 104
    19c2:	b9 f2       	breq	.-82     	; 0x1972 <vfprintf+0xa2>
    19c4:	98 2f       	mov	r25, r24
    19c6:	9f 7d       	andi	r25, 0xDF	; 223
    19c8:	95 54       	subi	r25, 0x45	; 69
    19ca:	93 30       	cpi	r25, 0x03	; 3
    19cc:	c0 f0       	brcs	.+48     	; 0x19fe <vfprintf+0x12e>
    19ce:	83 36       	cpi	r24, 0x63	; 99
    19d0:	a1 f1       	breq	.+104    	; 0x1a3a <vfprintf+0x16a>
    19d2:	83 37       	cpi	r24, 0x73	; 115
    19d4:	c1 f1       	breq	.+112    	; 0x1a46 <vfprintf+0x176>
    19d6:	83 35       	cpi	r24, 0x53	; 83
    19d8:	09 f0       	breq	.+2      	; 0x19dc <vfprintf+0x10c>
    19da:	5b c0       	rjmp	.+182    	; 0x1a92 <vfprintf+0x1c2>
    19dc:	d8 01       	movw	r26, r16
    19de:	cd 90       	ld	r12, X+
    19e0:	dd 90       	ld	r13, X+
    19e2:	8d 01       	movw	r16, r26
    19e4:	6b 2d       	mov	r22, r11
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	56 fc       	sbrc	r5, 6
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <vfprintf+0x120>
    19ec:	6f ef       	ldi	r22, 0xFF	; 255
    19ee:	7f ef       	ldi	r23, 0xFF	; 255
    19f0:	c6 01       	movw	r24, r12
    19f2:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <strnlen_P>
    19f6:	5c 01       	movw	r10, r24
    19f8:	68 94       	set
    19fa:	57 f8       	bld	r5, 7
    19fc:	0a c0       	rjmp	.+20     	; 0x1a12 <vfprintf+0x142>
    19fe:	0c 5f       	subi	r16, 0xFC	; 252
    1a00:	1f 4f       	sbci	r17, 0xFF	; 255
    1a02:	ef e3       	ldi	r30, 0x3F	; 63
    1a04:	e9 83       	std	Y+1, r30	; 0x01
    1a06:	aa 24       	eor	r10, r10
    1a08:	a3 94       	inc	r10
    1a0a:	b1 2c       	mov	r11, r1
    1a0c:	64 01       	movw	r12, r8
    1a0e:	e8 94       	clt
    1a10:	57 f8       	bld	r5, 7
    1a12:	53 fc       	sbrc	r5, 3
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <vfprintf+0x14e>
    1a16:	4a 14       	cp	r4, r10
    1a18:	1b 04       	cpc	r1, r11
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <vfprintf+0x14e>
    1a1c:	18 f5       	brcc	.+70     	; 0x1a64 <vfprintf+0x194>
    1a1e:	34 2c       	mov	r3, r4
    1a20:	a1 14       	cp	r10, r1
    1a22:	b1 04       	cpc	r11, r1
    1a24:	31 f5       	brne	.+76     	; 0x1a72 <vfprintf+0x1a2>
    1a26:	33 20       	and	r3, r3
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <vfprintf+0x15c>
    1a2a:	69 cf       	rjmp	.-302    	; 0x18fe <vfprintf+0x2e>
    1a2c:	b7 01       	movw	r22, r14
    1a2e:	80 e2       	ldi	r24, 0x20	; 32
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <fputc>
    1a36:	3a 94       	dec	r3
    1a38:	f6 cf       	rjmp	.-20     	; 0x1a26 <vfprintf+0x156>
    1a3a:	d8 01       	movw	r26, r16
    1a3c:	8c 91       	ld	r24, X
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	0e 5f       	subi	r16, 0xFE	; 254
    1a42:	1f 4f       	sbci	r17, 0xFF	; 255
    1a44:	e0 cf       	rjmp	.-64     	; 0x1a06 <vfprintf+0x136>
    1a46:	f8 01       	movw	r30, r16
    1a48:	c1 90       	ld	r12, Z+
    1a4a:	d1 90       	ld	r13, Z+
    1a4c:	8f 01       	movw	r16, r30
    1a4e:	6b 2d       	mov	r22, r11
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	56 fc       	sbrc	r5, 6
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <vfprintf+0x18a>
    1a56:	6f ef       	ldi	r22, 0xFF	; 255
    1a58:	7f ef       	ldi	r23, 0xFF	; 255
    1a5a:	c6 01       	movw	r24, r12
    1a5c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <strnlen>
    1a60:	5c 01       	movw	r10, r24
    1a62:	d5 cf       	rjmp	.-86     	; 0x1a0e <vfprintf+0x13e>
    1a64:	b7 01       	movw	r22, r14
    1a66:	80 e2       	ldi	r24, 0x20	; 32
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <fputc>
    1a6e:	4a 94       	dec	r4
    1a70:	d2 cf       	rjmp	.-92     	; 0x1a16 <vfprintf+0x146>
    1a72:	f6 01       	movw	r30, r12
    1a74:	57 fc       	sbrc	r5, 7
    1a76:	85 91       	lpm	r24, Z+
    1a78:	57 fe       	sbrs	r5, 7
    1a7a:	81 91       	ld	r24, Z+
    1a7c:	6f 01       	movw	r12, r30
    1a7e:	b7 01       	movw	r22, r14
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <fputc>
    1a86:	31 10       	cpse	r3, r1
    1a88:	3a 94       	dec	r3
    1a8a:	b1 e0       	ldi	r27, 0x01	; 1
    1a8c:	ab 1a       	sub	r10, r27
    1a8e:	b1 08       	sbc	r11, r1
    1a90:	c7 cf       	rjmp	.-114    	; 0x1a20 <vfprintf+0x150>
    1a92:	84 36       	cpi	r24, 0x64	; 100
    1a94:	19 f0       	breq	.+6      	; 0x1a9c <vfprintf+0x1cc>
    1a96:	89 36       	cpi	r24, 0x69	; 105
    1a98:	09 f0       	breq	.+2      	; 0x1a9c <vfprintf+0x1cc>
    1a9a:	71 c0       	rjmp	.+226    	; 0x1b7e <vfprintf+0x2ae>
    1a9c:	f8 01       	movw	r30, r16
    1a9e:	57 fe       	sbrs	r5, 7
    1aa0:	67 c0       	rjmp	.+206    	; 0x1b70 <vfprintf+0x2a0>
    1aa2:	61 91       	ld	r22, Z+
    1aa4:	71 91       	ld	r23, Z+
    1aa6:	81 91       	ld	r24, Z+
    1aa8:	91 91       	ld	r25, Z+
    1aaa:	8f 01       	movw	r16, r30
    1aac:	e5 2d       	mov	r30, r5
    1aae:	ef 76       	andi	r30, 0x6F	; 111
    1ab0:	de 2e       	mov	r13, r30
    1ab2:	97 ff       	sbrs	r25, 7
    1ab4:	09 c0       	rjmp	.+18     	; 0x1ac8 <vfprintf+0x1f8>
    1ab6:	90 95       	com	r25
    1ab8:	80 95       	com	r24
    1aba:	70 95       	com	r23
    1abc:	61 95       	neg	r22
    1abe:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac4:	68 94       	set
    1ac6:	d7 f8       	bld	r13, 7
    1ac8:	2a e0       	ldi	r18, 0x0A	; 10
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	a4 01       	movw	r20, r8
    1ace:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__ultoa_invert>
    1ad2:	c8 2e       	mov	r12, r24
    1ad4:	c8 18       	sub	r12, r8
    1ad6:	ac 2c       	mov	r10, r12
    1ad8:	5d 2c       	mov	r5, r13
    1ada:	d6 fe       	sbrs	r13, 6
    1adc:	0c c0       	rjmp	.+24     	; 0x1af6 <vfprintf+0x226>
    1ade:	e8 94       	clt
    1ae0:	50 f8       	bld	r5, 0
    1ae2:	cb 14       	cp	r12, r11
    1ae4:	40 f4       	brcc	.+16     	; 0x1af6 <vfprintf+0x226>
    1ae6:	d4 fe       	sbrs	r13, 4
    1ae8:	05 c0       	rjmp	.+10     	; 0x1af4 <vfprintf+0x224>
    1aea:	d2 fc       	sbrc	r13, 2
    1aec:	03 c0       	rjmp	.+6      	; 0x1af4 <vfprintf+0x224>
    1aee:	5d 2d       	mov	r21, r13
    1af0:	5e 7e       	andi	r21, 0xEE	; 238
    1af2:	55 2e       	mov	r5, r21
    1af4:	ab 2c       	mov	r10, r11
    1af6:	54 fe       	sbrs	r5, 4
    1af8:	93 c0       	rjmp	.+294    	; 0x1c20 <vfprintf+0x350>
    1afa:	fe 01       	movw	r30, r28
    1afc:	ec 0d       	add	r30, r12
    1afe:	f1 1d       	adc	r31, r1
    1b00:	80 81       	ld	r24, Z
    1b02:	80 33       	cpi	r24, 0x30	; 48
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <vfprintf+0x238>
    1b06:	85 c0       	rjmp	.+266    	; 0x1c12 <vfprintf+0x342>
    1b08:	65 2d       	mov	r22, r5
    1b0a:	69 7e       	andi	r22, 0xE9	; 233
    1b0c:	56 2e       	mov	r5, r22
    1b0e:	75 2d       	mov	r23, r5
    1b10:	78 70       	andi	r23, 0x08	; 8
    1b12:	37 2e       	mov	r3, r23
    1b14:	53 fc       	sbrc	r5, 3
    1b16:	93 c0       	rjmp	.+294    	; 0x1c3e <vfprintf+0x36e>
    1b18:	50 fe       	sbrs	r5, 0
    1b1a:	8d c0       	rjmp	.+282    	; 0x1c36 <vfprintf+0x366>
    1b1c:	bc 2c       	mov	r11, r12
    1b1e:	a4 14       	cp	r10, r4
    1b20:	10 f4       	brcc	.+4      	; 0x1b26 <vfprintf+0x256>
    1b22:	b4 0c       	add	r11, r4
    1b24:	ba 18       	sub	r11, r10
    1b26:	54 fe       	sbrs	r5, 4
    1b28:	90 c0       	rjmp	.+288    	; 0x1c4a <vfprintf+0x37a>
    1b2a:	b7 01       	movw	r22, r14
    1b2c:	80 e3       	ldi	r24, 0x30	; 48
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <fputc>
    1b34:	52 fe       	sbrs	r5, 2
    1b36:	07 c0       	rjmp	.+14     	; 0x1b46 <vfprintf+0x276>
    1b38:	88 e7       	ldi	r24, 0x78	; 120
    1b3a:	51 fc       	sbrc	r5, 1
    1b3c:	88 e5       	ldi	r24, 0x58	; 88
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	b7 01       	movw	r22, r14
    1b42:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <fputc>
    1b46:	cb 14       	cp	r12, r11
    1b48:	08 f4       	brcc	.+2      	; 0x1b4c <vfprintf+0x27c>
    1b4a:	8b c0       	rjmp	.+278    	; 0x1c62 <vfprintf+0x392>
    1b4c:	ca 94       	dec	r12
    1b4e:	d1 2c       	mov	r13, r1
    1b50:	8f ef       	ldi	r24, 0xFF	; 255
    1b52:	c8 1a       	sub	r12, r24
    1b54:	d8 0a       	sbc	r13, r24
    1b56:	c8 0c       	add	r12, r8
    1b58:	d9 1c       	adc	r13, r9
    1b5a:	d6 01       	movw	r26, r12
    1b5c:	8e 91       	ld	r24, -X
    1b5e:	6d 01       	movw	r12, r26
    1b60:	b7 01       	movw	r22, r14
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <fputc>
    1b68:	8c 14       	cp	r8, r12
    1b6a:	9d 04       	cpc	r9, r13
    1b6c:	b1 f7       	brne	.-20     	; 0x1b5a <vfprintf+0x28a>
    1b6e:	5b cf       	rjmp	.-330    	; 0x1a26 <vfprintf+0x156>
    1b70:	61 91       	ld	r22, Z+
    1b72:	71 91       	ld	r23, Z+
    1b74:	07 2e       	mov	r0, r23
    1b76:	00 0c       	add	r0, r0
    1b78:	88 0b       	sbc	r24, r24
    1b7a:	99 0b       	sbc	r25, r25
    1b7c:	96 cf       	rjmp	.-212    	; 0x1aaa <vfprintf+0x1da>
    1b7e:	d5 2c       	mov	r13, r5
    1b80:	e8 94       	clt
    1b82:	d4 f8       	bld	r13, 4
    1b84:	2a e0       	ldi	r18, 0x0A	; 10
    1b86:	85 37       	cpi	r24, 0x75	; 117
    1b88:	29 f1       	breq	.+74     	; 0x1bd4 <vfprintf+0x304>
    1b8a:	f5 2d       	mov	r31, r5
    1b8c:	f9 7f       	andi	r31, 0xF9	; 249
    1b8e:	df 2e       	mov	r13, r31
    1b90:	80 37       	cpi	r24, 0x70	; 112
    1b92:	a1 f0       	breq	.+40     	; 0x1bbc <vfprintf+0x2ec>
    1b94:	58 f4       	brcc	.+22     	; 0x1bac <vfprintf+0x2dc>
    1b96:	88 35       	cpi	r24, 0x58	; 88
    1b98:	a1 f0       	breq	.+40     	; 0x1bc2 <vfprintf+0x2f2>
    1b9a:	8f 36       	cpi	r24, 0x6F	; 111
    1b9c:	d1 f0       	breq	.+52     	; 0x1bd2 <vfprintf+0x302>
    1b9e:	f7 01       	movw	r30, r14
    1ba0:	86 81       	ldd	r24, Z+6	; 0x06
    1ba2:	97 81       	ldd	r25, Z+7	; 0x07
    1ba4:	2f 96       	adiw	r28, 0x0f	; 15
    1ba6:	e2 e1       	ldi	r30, 0x12	; 18
    1ba8:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__epilogue_restores__>
    1bac:	88 37       	cpi	r24, 0x78	; 120
    1bae:	b9 f7       	brne	.-18     	; 0x1b9e <vfprintf+0x2ce>
    1bb0:	d4 fe       	sbrs	r13, 4
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <vfprintf+0x2e8>
    1bb4:	68 94       	set
    1bb6:	d2 f8       	bld	r13, 2
    1bb8:	20 e1       	ldi	r18, 0x10	; 16
    1bba:	0c c0       	rjmp	.+24     	; 0x1bd4 <vfprintf+0x304>
    1bbc:	68 94       	set
    1bbe:	d4 f8       	bld	r13, 4
    1bc0:	f7 cf       	rjmp	.-18     	; 0x1bb0 <vfprintf+0x2e0>
    1bc2:	54 fe       	sbrs	r5, 4
    1bc4:	03 c0       	rjmp	.+6      	; 0x1bcc <vfprintf+0x2fc>
    1bc6:	2f 2f       	mov	r18, r31
    1bc8:	26 60       	ori	r18, 0x06	; 6
    1bca:	d2 2e       	mov	r13, r18
    1bcc:	20 e1       	ldi	r18, 0x10	; 16
    1bce:	32 e0       	ldi	r19, 0x02	; 2
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <vfprintf+0x306>
    1bd2:	28 e0       	ldi	r18, 0x08	; 8
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	d7 fe       	sbrs	r13, 7
    1bda:	15 c0       	rjmp	.+42     	; 0x1c06 <vfprintf+0x336>
    1bdc:	41 91       	ld	r20, Z+
    1bde:	51 91       	ld	r21, Z+
    1be0:	61 91       	ld	r22, Z+
    1be2:	71 91       	ld	r23, Z+
    1be4:	4c 87       	std	Y+12, r20	; 0x0c
    1be6:	5d 87       	std	Y+13, r21	; 0x0d
    1be8:	6e 87       	std	Y+14, r22	; 0x0e
    1bea:	7f 87       	std	Y+15, r23	; 0x0f
    1bec:	8f 01       	movw	r16, r30
    1bee:	a4 01       	movw	r20, r8
    1bf0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bf2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bf4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bf6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bf8:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__ultoa_invert>
    1bfc:	c8 2e       	mov	r12, r24
    1bfe:	c8 18       	sub	r12, r8
    1c00:	e8 94       	clt
    1c02:	d7 f8       	bld	r13, 7
    1c04:	68 cf       	rjmp	.-304    	; 0x1ad6 <vfprintf+0x206>
    1c06:	81 91       	ld	r24, Z+
    1c08:	91 91       	ld	r25, Z+
    1c0a:	ac 01       	movw	r20, r24
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	60 e0       	ldi	r22, 0x00	; 0
    1c10:	e9 cf       	rjmp	.-46     	; 0x1be4 <vfprintf+0x314>
    1c12:	52 fc       	sbrc	r5, 2
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <vfprintf+0x34a>
    1c16:	a3 94       	inc	r10
    1c18:	7a cf       	rjmp	.-268    	; 0x1b0e <vfprintf+0x23e>
    1c1a:	a3 94       	inc	r10
    1c1c:	a3 94       	inc	r10
    1c1e:	77 cf       	rjmp	.-274    	; 0x1b0e <vfprintf+0x23e>
    1c20:	85 2d       	mov	r24, r5
    1c22:	86 78       	andi	r24, 0x86	; 134
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <vfprintf+0x358>
    1c26:	73 cf       	rjmp	.-282    	; 0x1b0e <vfprintf+0x23e>
    1c28:	f6 cf       	rjmp	.-20     	; 0x1c16 <vfprintf+0x346>
    1c2a:	b7 01       	movw	r22, r14
    1c2c:	80 e2       	ldi	r24, 0x20	; 32
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <fputc>
    1c34:	a3 94       	inc	r10
    1c36:	a4 14       	cp	r10, r4
    1c38:	c0 f3       	brcs	.-16     	; 0x1c2a <vfprintf+0x35a>
    1c3a:	31 2c       	mov	r3, r1
    1c3c:	74 cf       	rjmp	.-280    	; 0x1b26 <vfprintf+0x256>
    1c3e:	34 2c       	mov	r3, r4
    1c40:	3a 18       	sub	r3, r10
    1c42:	a4 14       	cp	r10, r4
    1c44:	08 f4       	brcc	.+2      	; 0x1c48 <vfprintf+0x378>
    1c46:	6f cf       	rjmp	.-290    	; 0x1b26 <vfprintf+0x256>
    1c48:	f8 cf       	rjmp	.-16     	; 0x1c3a <vfprintf+0x36a>
    1c4a:	85 2d       	mov	r24, r5
    1c4c:	86 78       	andi	r24, 0x86	; 134
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <vfprintf+0x382>
    1c50:	7a cf       	rjmp	.-268    	; 0x1b46 <vfprintf+0x276>
    1c52:	8b e2       	ldi	r24, 0x2B	; 43
    1c54:	51 fe       	sbrs	r5, 1
    1c56:	80 e2       	ldi	r24, 0x20	; 32
    1c58:	57 fc       	sbrc	r5, 7
    1c5a:	8d e2       	ldi	r24, 0x2D	; 45
    1c5c:	b7 01       	movw	r22, r14
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	70 cf       	rjmp	.-288    	; 0x1b42 <vfprintf+0x272>
    1c62:	b7 01       	movw	r22, r14
    1c64:	80 e3       	ldi	r24, 0x30	; 48
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <fputc>
    1c6c:	ba 94       	dec	r11
    1c6e:	6b cf       	rjmp	.-298    	; 0x1b46 <vfprintf+0x276>
    1c70:	8f ef       	ldi	r24, 0xFF	; 255
    1c72:	9f ef       	ldi	r25, 0xFF	; 255
    1c74:	97 cf       	rjmp	.-210    	; 0x1ba4 <vfprintf+0x2d4>

00001c76 <strnlen_P>:
    1c76:	fc 01       	movw	r30, r24
    1c78:	05 90       	lpm	r0, Z+
    1c7a:	61 50       	subi	r22, 0x01	; 1
    1c7c:	70 40       	sbci	r23, 0x00	; 0
    1c7e:	01 10       	cpse	r0, r1
    1c80:	d8 f7       	brcc	.-10     	; 0x1c78 <strnlen_P+0x2>
    1c82:	80 95       	com	r24
    1c84:	90 95       	com	r25
    1c86:	8e 0f       	add	r24, r30
    1c88:	9f 1f       	adc	r25, r31
    1c8a:	08 95       	ret

00001c8c <strnlen>:
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	61 50       	subi	r22, 0x01	; 1
    1c90:	70 40       	sbci	r23, 0x00	; 0
    1c92:	01 90       	ld	r0, Z+
    1c94:	01 10       	cpse	r0, r1
    1c96:	d8 f7       	brcc	.-10     	; 0x1c8e <strnlen+0x2>
    1c98:	80 95       	com	r24
    1c9a:	90 95       	com	r25
    1c9c:	8e 0f       	add	r24, r30
    1c9e:	9f 1f       	adc	r25, r31
    1ca0:	08 95       	ret

00001ca2 <fputc>:
    1ca2:	0f 93       	push	r16
    1ca4:	1f 93       	push	r17
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	18 2f       	mov	r17, r24
    1cac:	09 2f       	mov	r16, r25
    1cae:	eb 01       	movw	r28, r22
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	81 fd       	sbrc	r24, 1
    1cb4:	09 c0       	rjmp	.+18     	; 0x1cc8 <fputc+0x26>
    1cb6:	1f ef       	ldi	r17, 0xFF	; 255
    1cb8:	0f ef       	ldi	r16, 0xFF	; 255
    1cba:	81 2f       	mov	r24, r17
    1cbc:	90 2f       	mov	r25, r16
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	1f 91       	pop	r17
    1cc4:	0f 91       	pop	r16
    1cc6:	08 95       	ret
    1cc8:	82 ff       	sbrs	r24, 2
    1cca:	14 c0       	rjmp	.+40     	; 0x1cf4 <fputc+0x52>
    1ccc:	2e 81       	ldd	r18, Y+6	; 0x06
    1cce:	3f 81       	ldd	r19, Y+7	; 0x07
    1cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd4:	28 17       	cp	r18, r24
    1cd6:	39 07       	cpc	r19, r25
    1cd8:	3c f4       	brge	.+14     	; 0x1ce8 <fputc+0x46>
    1cda:	e8 81       	ld	r30, Y
    1cdc:	f9 81       	ldd	r31, Y+1	; 0x01
    1cde:	cf 01       	movw	r24, r30
    1ce0:	01 96       	adiw	r24, 0x01	; 1
    1ce2:	99 83       	std	Y+1, r25	; 0x01
    1ce4:	88 83       	st	Y, r24
    1ce6:	10 83       	st	Z, r17
    1ce8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cea:	9f 81       	ldd	r25, Y+7	; 0x07
    1cec:	01 96       	adiw	r24, 0x01	; 1
    1cee:	9f 83       	std	Y+7, r25	; 0x07
    1cf0:	8e 83       	std	Y+6, r24	; 0x06
    1cf2:	e3 cf       	rjmp	.-58     	; 0x1cba <fputc+0x18>
    1cf4:	e8 85       	ldd	r30, Y+8	; 0x08
    1cf6:	f9 85       	ldd	r31, Y+9	; 0x09
    1cf8:	81 2f       	mov	r24, r17
    1cfa:	09 95       	icall
    1cfc:	89 2b       	or	r24, r25
    1cfe:	a1 f3       	breq	.-24     	; 0x1ce8 <fputc+0x46>
    1d00:	da cf       	rjmp	.-76     	; 0x1cb6 <fputc+0x14>

00001d02 <__ultoa_invert>:
    1d02:	fa 01       	movw	r30, r20
    1d04:	aa 27       	eor	r26, r26
    1d06:	28 30       	cpi	r18, 0x08	; 8
    1d08:	51 f1       	breq	.+84     	; 0x1d5e <__ultoa_invert+0x5c>
    1d0a:	20 31       	cpi	r18, 0x10	; 16
    1d0c:	81 f1       	breq	.+96     	; 0x1d6e <__ultoa_invert+0x6c>
    1d0e:	e8 94       	clt
    1d10:	6f 93       	push	r22
    1d12:	6e 7f       	andi	r22, 0xFE	; 254
    1d14:	6e 5f       	subi	r22, 0xFE	; 254
    1d16:	7f 4f       	sbci	r23, 0xFF	; 255
    1d18:	8f 4f       	sbci	r24, 0xFF	; 255
    1d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1c:	af 4f       	sbci	r26, 0xFF	; 255
    1d1e:	b1 e0       	ldi	r27, 0x01	; 1
    1d20:	3e d0       	rcall	.+124    	; 0x1d9e <__ultoa_invert+0x9c>
    1d22:	b4 e0       	ldi	r27, 0x04	; 4
    1d24:	3c d0       	rcall	.+120    	; 0x1d9e <__ultoa_invert+0x9c>
    1d26:	67 0f       	add	r22, r23
    1d28:	78 1f       	adc	r23, r24
    1d2a:	89 1f       	adc	r24, r25
    1d2c:	9a 1f       	adc	r25, r26
    1d2e:	a1 1d       	adc	r26, r1
    1d30:	68 0f       	add	r22, r24
    1d32:	79 1f       	adc	r23, r25
    1d34:	8a 1f       	adc	r24, r26
    1d36:	91 1d       	adc	r25, r1
    1d38:	a1 1d       	adc	r26, r1
    1d3a:	6a 0f       	add	r22, r26
    1d3c:	71 1d       	adc	r23, r1
    1d3e:	81 1d       	adc	r24, r1
    1d40:	91 1d       	adc	r25, r1
    1d42:	a1 1d       	adc	r26, r1
    1d44:	20 d0       	rcall	.+64     	; 0x1d86 <__ultoa_invert+0x84>
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <__ultoa_invert+0x48>
    1d48:	68 94       	set
    1d4a:	3f 91       	pop	r19
    1d4c:	2a e0       	ldi	r18, 0x0A	; 10
    1d4e:	26 9f       	mul	r18, r22
    1d50:	11 24       	eor	r1, r1
    1d52:	30 19       	sub	r19, r0
    1d54:	30 5d       	subi	r19, 0xD0	; 208
    1d56:	31 93       	st	Z+, r19
    1d58:	de f6       	brtc	.-74     	; 0x1d10 <__ultoa_invert+0xe>
    1d5a:	cf 01       	movw	r24, r30
    1d5c:	08 95       	ret
    1d5e:	46 2f       	mov	r20, r22
    1d60:	47 70       	andi	r20, 0x07	; 7
    1d62:	40 5d       	subi	r20, 0xD0	; 208
    1d64:	41 93       	st	Z+, r20
    1d66:	b3 e0       	ldi	r27, 0x03	; 3
    1d68:	0f d0       	rcall	.+30     	; 0x1d88 <__ultoa_invert+0x86>
    1d6a:	c9 f7       	brne	.-14     	; 0x1d5e <__ultoa_invert+0x5c>
    1d6c:	f6 cf       	rjmp	.-20     	; 0x1d5a <__ultoa_invert+0x58>
    1d6e:	46 2f       	mov	r20, r22
    1d70:	4f 70       	andi	r20, 0x0F	; 15
    1d72:	40 5d       	subi	r20, 0xD0	; 208
    1d74:	4a 33       	cpi	r20, 0x3A	; 58
    1d76:	18 f0       	brcs	.+6      	; 0x1d7e <__ultoa_invert+0x7c>
    1d78:	49 5d       	subi	r20, 0xD9	; 217
    1d7a:	31 fd       	sbrc	r19, 1
    1d7c:	40 52       	subi	r20, 0x20	; 32
    1d7e:	41 93       	st	Z+, r20
    1d80:	02 d0       	rcall	.+4      	; 0x1d86 <__ultoa_invert+0x84>
    1d82:	a9 f7       	brne	.-22     	; 0x1d6e <__ultoa_invert+0x6c>
    1d84:	ea cf       	rjmp	.-44     	; 0x1d5a <__ultoa_invert+0x58>
    1d86:	b4 e0       	ldi	r27, 0x04	; 4
    1d88:	a6 95       	lsr	r26
    1d8a:	97 95       	ror	r25
    1d8c:	87 95       	ror	r24
    1d8e:	77 95       	ror	r23
    1d90:	67 95       	ror	r22
    1d92:	ba 95       	dec	r27
    1d94:	c9 f7       	brne	.-14     	; 0x1d88 <__ultoa_invert+0x86>
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	61 05       	cpc	r22, r1
    1d9a:	71 05       	cpc	r23, r1
    1d9c:	08 95       	ret
    1d9e:	9b 01       	movw	r18, r22
    1da0:	ac 01       	movw	r20, r24
    1da2:	0a 2e       	mov	r0, r26
    1da4:	06 94       	lsr	r0
    1da6:	57 95       	ror	r21
    1da8:	47 95       	ror	r20
    1daa:	37 95       	ror	r19
    1dac:	27 95       	ror	r18
    1dae:	ba 95       	dec	r27
    1db0:	c9 f7       	brne	.-14     	; 0x1da4 <__ultoa_invert+0xa2>
    1db2:	62 0f       	add	r22, r18
    1db4:	73 1f       	adc	r23, r19
    1db6:	84 1f       	adc	r24, r20
    1db8:	95 1f       	adc	r25, r21
    1dba:	a0 1d       	adc	r26, r0
    1dbc:	08 95       	ret

00001dbe <__prologue_saves__>:
    1dbe:	2f 92       	push	r2
    1dc0:	3f 92       	push	r3
    1dc2:	4f 92       	push	r4
    1dc4:	5f 92       	push	r5
    1dc6:	6f 92       	push	r6
    1dc8:	7f 92       	push	r7
    1dca:	8f 92       	push	r8
    1dcc:	9f 92       	push	r9
    1dce:	af 92       	push	r10
    1dd0:	bf 92       	push	r11
    1dd2:	cf 92       	push	r12
    1dd4:	df 92       	push	r13
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	ca 1b       	sub	r28, r26
    1de8:	db 0b       	sbc	r29, r27
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	09 94       	ijmp

00001df6 <__epilogue_restores__>:
    1df6:	2a 88       	ldd	r2, Y+18	; 0x12
    1df8:	39 88       	ldd	r3, Y+17	; 0x11
    1dfa:	48 88       	ldd	r4, Y+16	; 0x10
    1dfc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1dfe:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e00:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e02:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e04:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e06:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e08:	b9 84       	ldd	r11, Y+9	; 0x09
    1e0a:	c8 84       	ldd	r12, Y+8	; 0x08
    1e0c:	df 80       	ldd	r13, Y+7	; 0x07
    1e0e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e10:	fd 80       	ldd	r15, Y+5	; 0x05
    1e12:	0c 81       	ldd	r16, Y+4	; 0x04
    1e14:	1b 81       	ldd	r17, Y+3	; 0x03
    1e16:	aa 81       	ldd	r26, Y+2	; 0x02
    1e18:	b9 81       	ldd	r27, Y+1	; 0x01
    1e1a:	ce 0f       	add	r28, r30
    1e1c:	d1 1d       	adc	r29, r1
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	ed 01       	movw	r28, r26
    1e2a:	08 95       	ret

00001e2c <_exit>:
    1e2c:	f8 94       	cli

00001e2e <__stop_program>:
    1e2e:	ff cf       	rjmp	.-2      	; 0x1e2e <__stop_program>
